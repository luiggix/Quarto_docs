{"title":"Métodos iterativos para la solución de sistemas de ecuaciones lineales","markdown":{"yaml":{"title":"Métodos iterativos para la solución de sistemas de ecuaciones lineales"},"headingText":"Cruce de dos rectas.","containsRefs":false,"markdown":"\n\n\n\n\n**Objetivo.**\n\nDescribir e implementar los algoritmos de Jacobi, Gauss-Seidel y SOR para la solución de sistemas de ecuaciones lineales.\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\nTrabajo realizado con el apoyo del Programa UNAM-DGAPA-PAPIME PE101922\n\n\n\n\nLas siguientes dos rectas se cruzan en algún punto.\n\n$$\n\\begin{array}{ccc}\n3x + 2y & = &2 \\\\\n2x + 6y & = &-8\n\\end{array}\n$$\n\nLas ecuaciones de las rectas se pueden escribir como:\n\n$$\n\\begin{array}{ccc}\n\\dfrac{3}{2}x + y & = & 1 \\\\\n\\dfrac{2}{6}x + y & = & -\\dfrac{8}{6}\n\\end{array} \\Longrightarrow\n\\begin{array}{ccc}\ny = m_1 x + b_1 \\\\\ny = m_2 x + b_2\n\\end{array} \\text{ donde }\n\\begin{array}{ccc}\nm_1 = -\\dfrac{3}{2} & b_1 = 1 \\\\\nm_2 = -\\dfrac{2}{6} & b_2 = -\\dfrac{8}{6}\n\\end{array}\n$$\n\nAhora realizaremos la gráfica de las rectas:\n\n## Definición y gráfica de las rectas\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 1.**\n\n<font color=\"Black\"> En la siguiente celda se define el domino $x$ para las líneas rectas, los parámetros para construir la línea recta 1 y su construcción. De la misma manera define los parámetros y construye la recta 2. Si todo lo  hiciste correctamente, la celda de graficación mostrará las gráficas de las líneas rectas.</font>\n</div>\n\n**Gráfica de las líneas rectas.**\n\n## Sistemas lineales.\n\nLas ecuaciones de las rectas se pueden escribir en forma de un sistema lineal:\n\n$$\n\\left[\n\\begin{array}{cc}\n3 & 2 \\\\\n2 & 6\n\\end{array} \\right]\n\\left[\n\\begin{array}{c}\nx_{0} \\\\\nx_{1}\n\\end{array} \\right] =\n\\left[\n\\begin{array}{c}\n2 \\\\ \n-8\n\\end{array} \\right]\n\\tag{1}\n$$\n\nPodemos calcular el cruce de las rectas resolviendo el sistema lineal:\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\"> Definir el sistema lineal y resolverlo. Posteriomente graficar las rectas y el punto solución.</font>\n</div>\n\nEl sistema lineal se puede resolver directamente con la función `np.linalg.solve()` como sigue:\n\n**Gráfica de las líneas rectas y el punto de cruce (solución).**\n\nEn general, un sistema de ecuaciones lineales de $n \\times n$ se escribe como sigue:\n\n$$\n\\begin{array}{ccccccc}\na_{11}x_1 & + & a_{12}x_2 & +  \\dots  + & a_{1n}x_n & = & b_1 \\\\\na_{21}x_1 & + & a_{22}x_2 & +  \\dots + & a_{2n}x_n & = & b_2 \\\\\n\\vdots & & \\vdots &  & \\vdots & & \\vdots \\\\\na_{i1}x_1 & + & a_{i2}x_2 & +  \\dots + & a_{in}x_n & = & b_i \\\\\n\\vdots & & \\vdots &  & \\vdots & & \\vdots \\\\\na_{n1}x_1 & + & a_{n2}x_2 & + \\dots + & a_{nn}x_n & = & b_n\n\\end{array}\n$$\n\nEs posible usar diferentes métodos para resolver este tipo de sistemas. Veamos tres de ellos.\n\n# Método de Jacobi\n\n* En este método, de la primera ecuación se despeja $x_1$; de la segunda ecuación se despeja $x_2$; y a sí sucesivamente, de tal manera que obtenemos:\n$$\n\\begin{eqnarray*}\n\tx_1 & = &\\left( b_1 - (a_{12}x_2 +  \\dots  + a_{1n}x_n) \\right) / a_{11}  \\\\\n\tx_2 & = &\\left( b_2 - (a_{21}x_1 +  \\dots  + a_{2n}x_n) \\right) / a_{22} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_i & = &\\left( b_i - (a_{i1}x_1 +  \\dots  + a_{in}x_n) \\right) / a_{ii} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_n & = &\\left( b_n - (a_{n1}x_1 +  \\dots  + a_{nn-1}x_{n-1}) \\right) / a_{nn}\n\\end{eqnarray*}\n$$\n\n* Suponemos ahora que tenemos una solución inicial aproximada $\\mathbf{x}^0 = [x_1^0, \\dots, x_n^0]$. Usando esta solución inicial, es posible hacer una nueva aproximación para obtener  $\\mathbf{x}^1 = [x_1^1, \\dots, x_n^1]$ como sigue:\n\n$$\n\\begin{eqnarray*}\n\tx_1^1 & = &\\left( b_1 - (a_{12}x_2^0 +  \\dots  + a_{1n}x_n^0) \\right) / a_{11}  \\\\\n\tx_2^1 & = &\\left( b_2 - (a_{21}x_1^0 +  \\dots  + a_{2n}x_n^0) \\right) / a_{22} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_i^1 & = &\\left( b_i - (a_{i1}x_1^0 +  \\dots  + a_{in}x_n^0) \\right) / a_{ii} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_n^1 & = &\\left( b_n - (a_{n1}x_1^0 +  \\dots  + a_{nn-1}x_{n-1}^0) \\right) / a_{nn}\n\\end{eqnarray*}\n$$\n\n* En general para $i = 1, \\dots, n$ y $k = 1, 2, \\dots$ tenemos:\n\n$$\nx_i^k = \\frac{1}{a_{i,i}} \\left(b_i -  \\sum_{j \\neq i} a_{i,j} x_j^{k-1} \\right)\n$$\n\n* En términos de matrices, la **iteración de Jacobi** se escribe:\n$$\n\\mathbf{x}^k = -\\mathbf{D}^{-1} \\mathbf{B}\\mathbf{x}^{k-1} + \\mathbf{D}^{-1} \\mathbf{b}\n$$\n\ndonde $\\mathbf{D}$ es la matriz diagonal y $\\mathbf{B} = \\mathbf{A} - \\mathbf{D}$.\n\n* El cálculo de cada componente $x_i^k$ es independiente de las otras componentes, por lo que este método se conoce también como de  *desplazamientos simultáneos*.\n\n\n## Algoritmo Jacobi.\nEn general, podemos definir el siguiente algoritmo para el método de Jacobi.\n<center>\n<img src=\"./Jacobi.png\"  width='500px'/>\n</center>\n\n<div class=\"alert alert-info\">\n\nObserva que en este algoritmo hay un ciclo `while` el cual termina cuando el error es menor o igual que una tolerancia `tol` o se ha alcanzado un número máximo de iteraciones `kmax`. En la línea **11** se calcula el error, que en términos matemáticos se define como $error = || \\mathbf{x}^k - \\mathbf{x}||$ donde $\\mathbf{x}^k$ es la aproximación de la iteración $k$-ésima y $\\mathbf{x}$ es la solución exacta. En muchas ocasiones no se tiene acceso a la solución exacta por lo que se compara con la solución de la iteración anterior, es decir $error = || \\mathbf{x}^k - \\mathbf{x}^{k-1}||$. En los ejemplos que siguen si tenemos la solución exacta, por lo que haremos la comparación con ella.\n</div>\n\n## Implementación.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 3. Aplicación del método de Jacobi.**\n\n<font color=\"Black\"> Haciendo uso de la función `jacobi` definida en la celda anterior, aproxima la solución del sistema de ecuaciones (1). Utiliza la solución inicial `(xi, yi)` = $(-2, 2)$, una tolerancia `tol` = $1 \\times 10^{-5}$ y `kmax` = $50$ iteraciones.</font>\n</div>\n\n<div class=\"alert alert-info\">\n\nObserva que la función `jacobi()` regresa 5 valores: \n* `solJ` la solución obtenida, \n* `xs` y `ys` componentes de las soluciones aproximadas en cada paso, \n* `eJ` el error con respecto a la solución exacta e \n* `itJ` el número de iteraciones realizadas.\n</div>\n\nA continuación graficamos como es que la solución se va aproximando con este método.\n\n## Cálculo del error\n\n* Definimos $e_i^k = x_i^k - x_i$ como la diferencia entre la $i$-ésima componente  de la solución exacta y la $i$-ésima componente de la $k$-ésima iteración, de tal manera que $\\mathbf{e} = [e_1, \\dots, e_n]^T$ es el vector error.\n\n* Aplicando una vez la iteración de Jacobi para $x_i$ y $x_i^{k+1}$ podemos escribir la diferencia como sigue:\n\n$$\n\\begin{eqnarray*}\n\\left| e_i^{k+1} \\right| & = &\\left| x_i^{k+1} - x_i  \\right| \\\\\n\\left| e_i^{k+1} \\right| & = & \\left|\n\\frac{1}{a_{i,i}} \\left(b_i - \\sum_{j \\neq i} a_{i,j} x_j^{k} \\right) -\n\\frac{1}{a_{i,i}} \\left(b_i - \\sum_{j \\neq i} a_{i,j} x_j \\right) \\right| \\\\\n\\left| e_i^{k+1} \\right| & = & \\left| -\\sum_{j \\neq i} \\frac{a_{i,j}}{a_{i,i}} (x_j^k - x_j)\\right| \\\\\n\\left| e_i^{k+1} \\right| & = & \\left| -\\sum_{j \\neq i} \\frac{a_{i,j}}{a_{i,i}} e_j^k \\right| \n\\le \\sum_{j \\neq i} \\left| \\frac{a_{i,j}}{a_{i,i}} \\right| || \\mathbf{e}^k ||_\\infty, \\qquad \\forall i, k .\n\\end{eqnarray*}\n$$\n\n* En particular:\n$$\n\\max_{1 \\le i \\le n} \\left( \\left| e_i^{k+1} \\right| \\right) =  || \\mathbf{e}^{k+1} ||_\\infty\n \\le \\sum_{j \\neq i} \\left| \\frac{a_{i,j}}{a_{i,i}} \\right| || \\mathbf{e}^k ||_\\infty\n$$\n\n* Definimos $\\displaystyle K = \\max_{1 \\le i \\le n} \\sum_{j \\neq i} \\left| \\frac{a_{i,j}}{a_{i,i}} \\right|$ entonces:\n\n$$\n\\begin{eqnarray*}\n|| \\mathbf{e}^{k+1} ||_\\infty & \\le &  K || \\mathbf{e}^{k} ||_\\infty \\le K \\left( K || \\mathbf{e}^{k-1} ||_\\infty \\right) \\le\n\\dots \\le K^k || \\mathbf{e}^{1} ||_\\infty \\\\\n|| \\mathbf{e}^{k+1} ||_\\infty & \\le &  K^k || \\mathbf{e}^{1} ||_\\infty\n\\end{eqnarray*}\n$$\n\n* Si $K < 1$ entonces $\\mathbf{e}^{k} \\rightarrow 0$ cuando $k \\rightarrow \\infty$\n\n* La condición $K < 1$ implica:\n$$\n\\sum_{j \\neq i} |a_{i,j}| < |a_{i,i}|, \\forall i\n$$\n\nA continuación graficamos el error que se va obteniendo en cada paso del método:\n\n# Método de Gauss-Seidel\n\n* La principal diferencia con el método de Jacobi es que las ecuaciones se analizan en un orden determinado.\n\n* Por ejemplo, si realizamos el cálculo en orden ascendente y ya hemos evaluado $x_1$ y $x_2$, para evaluar $x_3$ haríamos lo siguiente:}\n$$\n\\begin{eqnarray*}\n\\underline{x_1^1} & = &\\left( b_1 - (a_{12}x_2^0 + a_{13} x_3^0 + \\dots  + a_{1n}x_n^0) \\right) / a_{11}  \\\\\n\\underline{x_2^1} & = &\\left( b_2 - (a_{21}\\underline{x_1^1} + a_{23}x_3^0 + \\dots  + a_{2n}x_n^0) \\right) / a_{22} \\\\\nx_3 & = &\\left( b_3 - (a_{31}\\underline{x_1^1} + a_{32}\\underline{x_2^1} + \\dots  + a_{3n}x_n^0)\\right) / a_{22}\n\\end{eqnarray*}\n$$\n\n* En general la fórmula del método es como sigue:\n$$\nx_i^k = \\frac{1}{a_{i,i}} \\left(b_i -  \\sum_{j < i} a_{i,j} \\underline{x_j^{k}} \n- \\sum_{j > i} a_{i,j} x_j^{k-1} \\right) \n$$   \n\n* Este algoritmo es serial dado que cada componente depende de que las componentes previas se hayan calculado (*desplazamientos sucesivos*).\n\n* El valor de la nueva iteración $\\mathbf{x}^k$ depende del orden en que se examinan las componentes. Si se cambia el orden, el valor de $\\mathbf{x}^k$ cambia.\n\n\n## Algoritmo Gauss-Seidel.\nEn general, podemos definir el siguiente algoritmo para el método de Gauss-Seidel.\n\n<center>\n<img src=\"./Gauss_Seidel.png\"  width='500px'/>\n</center>\n\n<div class=\"alert alert-info\">\nSe aplican los mismo comentarios que para el algoritmo de Jacobi.\n</div>\n\n## Implementación.\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 2.**\n\n<font color=\"Black\">Haciendo uso de la función `gauss_seidel()` definida en la celda anterior, aproxima la solución del sistema de ecuaciones del Ejemplo 1. Utiliza la solución inicial `(xi, yi) =` $(-2, 2)$, una tolerancia `tol` = $1 \\times 10^{-5}$ y `kmax` = $50$ iteraciones. \nUtiliza las variables `solG`, `xs`, `ys`, `eG` e `itG` para almacenar la salida de la función `gauss_seidel()`.\nPosteriormente grafica las rectas y cómo se va calculando la solución con este método (puedes usar el mismo código que en el caso de Jacobi). Grafica también los errores para el método de Jacobi y para el de Gauss-Seidel, deberías obtener una imagen como la siguiente:\n    \n<img src='error_JGS.png' width=450px height=auto>\n</font>\n\n</div>\n\n**Cálculo de la solución con Gauss-Seidel**\n\n**Gráfica de las rectas, la solución y los pasos realizados**\n\n**Graficación de los errores de Jacobi y Gauss-Seidel**\n\n# Método de Sobrerrelajación sucesiva (*Successive Overrelaxation*, SOR)\n\n* Se obtiene apicando una extrapolación a la iteración de Gauss-Seidel.\n\n* Esta extrapolación es un promedio pesado entre la iteración actual y la anterior:\n$$\nx_i^k = \\omega \\bar{x}_i^k + (1-\\omega)x_i^{k-1}\n$$\ndonde $\\bar{x}$ denota una iteración de Gauss-Seidel y $\\omega$ es el\nfactor de extrapolación.\n\n* En términos de matrices tenemos:\n$$\n\\mathbf{x}^k = (\\mathbf{D} - \\omega \\mathbf{L})^{-1}(\\omega \\mathbf{U} + (1 - \\omega )\\mathbf{D})\\mathbf{x}^{k-1} \n+ \\omega (\\mathbf{D} - \\omega \\mathbf{L})^{-1} \\mathbf{b}\n$$\n* Elegir la $\\omega$ óptima no es simple, aunque se sabe que si $\\omega$ \nestá fuera del intervalo $(0,2)$ el método falla.\n\n## Implementación 3.\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 3.**\n\n<font color=\"Black\">Haciendo uso de la función `sor()` definida en la celda anterior, aproxima la solución del sistema de ecuaciones del Ejercicio 1. Utiliza la solución inicial `(xi, yi) =` $(-2, 2)$, una tolerancia `tol` = $1 \\times 10^{-5}$ y `kmax` = $50$ iteraciones. \nElije el valor de $\\omega = 1.09$. Utiliza las variables `solSOR`, `xs`, `ys`, `eSOR` e `itSOR` para almacenar la salida de la función `gauss_seidel()`. Posteriormente grafica las rectas y cómo se va calculando la solución con este método (puedes usar el mismo código que en el caso de Jacobi). Grafica también los errores para los tres métodos (Jacobi, Gauss-Seidel y SOR).\n    \n<img src='error_JGSSOR.png' width=450px height=auto>\n\n</font>\n\n</div>\n\n**Cálculo de la solución con SOR**\n\n**Gráfica de las rectas, la solución y los pasos realizados**\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 4.**\n\n<font color=\"Black\">Almacena los errores de los tres métodos en los archivos: `errorJacobi.npy`, `errorGaussSeidel.npy` y `errorSOR.npy` usando la función `np.save()`, checa la documentación [aquí](https://numpy.org/doc/stable/reference/generated/numpy.save.html). </font>\n</div>\n\n<div class=\"alert alert-info\">\n\n<font color=\"Black\">\n\nPrueba que tu código funciona usando:\n```\nprint('Error Jacobi = \\n{}\\n'.format(np.load('errorJacobi.npy')))\nprint('Error Gauss-Seidel = \\n{}\\n'.format(np.load('errorGaussSeidel.npy')))\nprint('Error SOR = \\n{}\\n'.format(np.load('errorSOR.npy')))\n\n```\n\n<br>La salida debería ser:\n    \n```\nError Jacobi = \n[2.98142397e+00 1.25707872e+00 ...]\n\nError Gauss-Seidel = \n[2.81091348e+00 6.24647439e-01 ...]\n\nError SOR = \n[2.60865150e+00 1.82203110e-01 ...]\n```\n</font>\n\n</div>\n","srcMarkdownNoYaml":"\n\n\n\n\n**Objetivo.**\n\nDescribir e implementar los algoritmos de Jacobi, Gauss-Seidel y SOR para la solución de sistemas de ecuaciones lineales.\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\nTrabajo realizado con el apoyo del Programa UNAM-DGAPA-PAPIME PE101922\n\n\n\n# Cruce de dos rectas.\n\nLas siguientes dos rectas se cruzan en algún punto.\n\n$$\n\\begin{array}{ccc}\n3x + 2y & = &2 \\\\\n2x + 6y & = &-8\n\\end{array}\n$$\n\nLas ecuaciones de las rectas se pueden escribir como:\n\n$$\n\\begin{array}{ccc}\n\\dfrac{3}{2}x + y & = & 1 \\\\\n\\dfrac{2}{6}x + y & = & -\\dfrac{8}{6}\n\\end{array} \\Longrightarrow\n\\begin{array}{ccc}\ny = m_1 x + b_1 \\\\\ny = m_2 x + b_2\n\\end{array} \\text{ donde }\n\\begin{array}{ccc}\nm_1 = -\\dfrac{3}{2} & b_1 = 1 \\\\\nm_2 = -\\dfrac{2}{6} & b_2 = -\\dfrac{8}{6}\n\\end{array}\n$$\n\nAhora realizaremos la gráfica de las rectas:\n\n## Definición y gráfica de las rectas\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 1.**\n\n<font color=\"Black\"> En la siguiente celda se define el domino $x$ para las líneas rectas, los parámetros para construir la línea recta 1 y su construcción. De la misma manera define los parámetros y construye la recta 2. Si todo lo  hiciste correctamente, la celda de graficación mostrará las gráficas de las líneas rectas.</font>\n</div>\n\n**Gráfica de las líneas rectas.**\n\n## Sistemas lineales.\n\nLas ecuaciones de las rectas se pueden escribir en forma de un sistema lineal:\n\n$$\n\\left[\n\\begin{array}{cc}\n3 & 2 \\\\\n2 & 6\n\\end{array} \\right]\n\\left[\n\\begin{array}{c}\nx_{0} \\\\\nx_{1}\n\\end{array} \\right] =\n\\left[\n\\begin{array}{c}\n2 \\\\ \n-8\n\\end{array} \\right]\n\\tag{1}\n$$\n\nPodemos calcular el cruce de las rectas resolviendo el sistema lineal:\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\"> Definir el sistema lineal y resolverlo. Posteriomente graficar las rectas y el punto solución.</font>\n</div>\n\nEl sistema lineal se puede resolver directamente con la función `np.linalg.solve()` como sigue:\n\n**Gráfica de las líneas rectas y el punto de cruce (solución).**\n\nEn general, un sistema de ecuaciones lineales de $n \\times n$ se escribe como sigue:\n\n$$\n\\begin{array}{ccccccc}\na_{11}x_1 & + & a_{12}x_2 & +  \\dots  + & a_{1n}x_n & = & b_1 \\\\\na_{21}x_1 & + & a_{22}x_2 & +  \\dots + & a_{2n}x_n & = & b_2 \\\\\n\\vdots & & \\vdots &  & \\vdots & & \\vdots \\\\\na_{i1}x_1 & + & a_{i2}x_2 & +  \\dots + & a_{in}x_n & = & b_i \\\\\n\\vdots & & \\vdots &  & \\vdots & & \\vdots \\\\\na_{n1}x_1 & + & a_{n2}x_2 & + \\dots + & a_{nn}x_n & = & b_n\n\\end{array}\n$$\n\nEs posible usar diferentes métodos para resolver este tipo de sistemas. Veamos tres de ellos.\n\n# Método de Jacobi\n\n* En este método, de la primera ecuación se despeja $x_1$; de la segunda ecuación se despeja $x_2$; y a sí sucesivamente, de tal manera que obtenemos:\n$$\n\\begin{eqnarray*}\n\tx_1 & = &\\left( b_1 - (a_{12}x_2 +  \\dots  + a_{1n}x_n) \\right) / a_{11}  \\\\\n\tx_2 & = &\\left( b_2 - (a_{21}x_1 +  \\dots  + a_{2n}x_n) \\right) / a_{22} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_i & = &\\left( b_i - (a_{i1}x_1 +  \\dots  + a_{in}x_n) \\right) / a_{ii} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_n & = &\\left( b_n - (a_{n1}x_1 +  \\dots  + a_{nn-1}x_{n-1}) \\right) / a_{nn}\n\\end{eqnarray*}\n$$\n\n* Suponemos ahora que tenemos una solución inicial aproximada $\\mathbf{x}^0 = [x_1^0, \\dots, x_n^0]$. Usando esta solución inicial, es posible hacer una nueva aproximación para obtener  $\\mathbf{x}^1 = [x_1^1, \\dots, x_n^1]$ como sigue:\n\n$$\n\\begin{eqnarray*}\n\tx_1^1 & = &\\left( b_1 - (a_{12}x_2^0 +  \\dots  + a_{1n}x_n^0) \\right) / a_{11}  \\\\\n\tx_2^1 & = &\\left( b_2 - (a_{21}x_1^0 +  \\dots  + a_{2n}x_n^0) \\right) / a_{22} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_i^1 & = &\\left( b_i - (a_{i1}x_1^0 +  \\dots  + a_{in}x_n^0) \\right) / a_{ii} \\\\\n\t\\vdots & & \\vdots \\\\\n\tx_n^1 & = &\\left( b_n - (a_{n1}x_1^0 +  \\dots  + a_{nn-1}x_{n-1}^0) \\right) / a_{nn}\n\\end{eqnarray*}\n$$\n\n* En general para $i = 1, \\dots, n$ y $k = 1, 2, \\dots$ tenemos:\n\n$$\nx_i^k = \\frac{1}{a_{i,i}} \\left(b_i -  \\sum_{j \\neq i} a_{i,j} x_j^{k-1} \\right)\n$$\n\n* En términos de matrices, la **iteración de Jacobi** se escribe:\n$$\n\\mathbf{x}^k = -\\mathbf{D}^{-1} \\mathbf{B}\\mathbf{x}^{k-1} + \\mathbf{D}^{-1} \\mathbf{b}\n$$\n\ndonde $\\mathbf{D}$ es la matriz diagonal y $\\mathbf{B} = \\mathbf{A} - \\mathbf{D}$.\n\n* El cálculo de cada componente $x_i^k$ es independiente de las otras componentes, por lo que este método se conoce también como de  *desplazamientos simultáneos*.\n\n\n## Algoritmo Jacobi.\nEn general, podemos definir el siguiente algoritmo para el método de Jacobi.\n<center>\n<img src=\"./Jacobi.png\"  width='500px'/>\n</center>\n\n<div class=\"alert alert-info\">\n\nObserva que en este algoritmo hay un ciclo `while` el cual termina cuando el error es menor o igual que una tolerancia `tol` o se ha alcanzado un número máximo de iteraciones `kmax`. En la línea **11** se calcula el error, que en términos matemáticos se define como $error = || \\mathbf{x}^k - \\mathbf{x}||$ donde $\\mathbf{x}^k$ es la aproximación de la iteración $k$-ésima y $\\mathbf{x}$ es la solución exacta. En muchas ocasiones no se tiene acceso a la solución exacta por lo que se compara con la solución de la iteración anterior, es decir $error = || \\mathbf{x}^k - \\mathbf{x}^{k-1}||$. En los ejemplos que siguen si tenemos la solución exacta, por lo que haremos la comparación con ella.\n</div>\n\n## Implementación.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 3. Aplicación del método de Jacobi.**\n\n<font color=\"Black\"> Haciendo uso de la función `jacobi` definida en la celda anterior, aproxima la solución del sistema de ecuaciones (1). Utiliza la solución inicial `(xi, yi)` = $(-2, 2)$, una tolerancia `tol` = $1 \\times 10^{-5}$ y `kmax` = $50$ iteraciones.</font>\n</div>\n\n<div class=\"alert alert-info\">\n\nObserva que la función `jacobi()` regresa 5 valores: \n* `solJ` la solución obtenida, \n* `xs` y `ys` componentes de las soluciones aproximadas en cada paso, \n* `eJ` el error con respecto a la solución exacta e \n* `itJ` el número de iteraciones realizadas.\n</div>\n\nA continuación graficamos como es que la solución se va aproximando con este método.\n\n## Cálculo del error\n\n* Definimos $e_i^k = x_i^k - x_i$ como la diferencia entre la $i$-ésima componente  de la solución exacta y la $i$-ésima componente de la $k$-ésima iteración, de tal manera que $\\mathbf{e} = [e_1, \\dots, e_n]^T$ es el vector error.\n\n* Aplicando una vez la iteración de Jacobi para $x_i$ y $x_i^{k+1}$ podemos escribir la diferencia como sigue:\n\n$$\n\\begin{eqnarray*}\n\\left| e_i^{k+1} \\right| & = &\\left| x_i^{k+1} - x_i  \\right| \\\\\n\\left| e_i^{k+1} \\right| & = & \\left|\n\\frac{1}{a_{i,i}} \\left(b_i - \\sum_{j \\neq i} a_{i,j} x_j^{k} \\right) -\n\\frac{1}{a_{i,i}} \\left(b_i - \\sum_{j \\neq i} a_{i,j} x_j \\right) \\right| \\\\\n\\left| e_i^{k+1} \\right| & = & \\left| -\\sum_{j \\neq i} \\frac{a_{i,j}}{a_{i,i}} (x_j^k - x_j)\\right| \\\\\n\\left| e_i^{k+1} \\right| & = & \\left| -\\sum_{j \\neq i} \\frac{a_{i,j}}{a_{i,i}} e_j^k \\right| \n\\le \\sum_{j \\neq i} \\left| \\frac{a_{i,j}}{a_{i,i}} \\right| || \\mathbf{e}^k ||_\\infty, \\qquad \\forall i, k .\n\\end{eqnarray*}\n$$\n\n* En particular:\n$$\n\\max_{1 \\le i \\le n} \\left( \\left| e_i^{k+1} \\right| \\right) =  || \\mathbf{e}^{k+1} ||_\\infty\n \\le \\sum_{j \\neq i} \\left| \\frac{a_{i,j}}{a_{i,i}} \\right| || \\mathbf{e}^k ||_\\infty\n$$\n\n* Definimos $\\displaystyle K = \\max_{1 \\le i \\le n} \\sum_{j \\neq i} \\left| \\frac{a_{i,j}}{a_{i,i}} \\right|$ entonces:\n\n$$\n\\begin{eqnarray*}\n|| \\mathbf{e}^{k+1} ||_\\infty & \\le &  K || \\mathbf{e}^{k} ||_\\infty \\le K \\left( K || \\mathbf{e}^{k-1} ||_\\infty \\right) \\le\n\\dots \\le K^k || \\mathbf{e}^{1} ||_\\infty \\\\\n|| \\mathbf{e}^{k+1} ||_\\infty & \\le &  K^k || \\mathbf{e}^{1} ||_\\infty\n\\end{eqnarray*}\n$$\n\n* Si $K < 1$ entonces $\\mathbf{e}^{k} \\rightarrow 0$ cuando $k \\rightarrow \\infty$\n\n* La condición $K < 1$ implica:\n$$\n\\sum_{j \\neq i} |a_{i,j}| < |a_{i,i}|, \\forall i\n$$\n\nA continuación graficamos el error que se va obteniendo en cada paso del método:\n\n# Método de Gauss-Seidel\n\n* La principal diferencia con el método de Jacobi es que las ecuaciones se analizan en un orden determinado.\n\n* Por ejemplo, si realizamos el cálculo en orden ascendente y ya hemos evaluado $x_1$ y $x_2$, para evaluar $x_3$ haríamos lo siguiente:}\n$$\n\\begin{eqnarray*}\n\\underline{x_1^1} & = &\\left( b_1 - (a_{12}x_2^0 + a_{13} x_3^0 + \\dots  + a_{1n}x_n^0) \\right) / a_{11}  \\\\\n\\underline{x_2^1} & = &\\left( b_2 - (a_{21}\\underline{x_1^1} + a_{23}x_3^0 + \\dots  + a_{2n}x_n^0) \\right) / a_{22} \\\\\nx_3 & = &\\left( b_3 - (a_{31}\\underline{x_1^1} + a_{32}\\underline{x_2^1} + \\dots  + a_{3n}x_n^0)\\right) / a_{22}\n\\end{eqnarray*}\n$$\n\n* En general la fórmula del método es como sigue:\n$$\nx_i^k = \\frac{1}{a_{i,i}} \\left(b_i -  \\sum_{j < i} a_{i,j} \\underline{x_j^{k}} \n- \\sum_{j > i} a_{i,j} x_j^{k-1} \\right) \n$$   \n\n* Este algoritmo es serial dado que cada componente depende de que las componentes previas se hayan calculado (*desplazamientos sucesivos*).\n\n* El valor de la nueva iteración $\\mathbf{x}^k$ depende del orden en que se examinan las componentes. Si se cambia el orden, el valor de $\\mathbf{x}^k$ cambia.\n\n\n## Algoritmo Gauss-Seidel.\nEn general, podemos definir el siguiente algoritmo para el método de Gauss-Seidel.\n\n<center>\n<img src=\"./Gauss_Seidel.png\"  width='500px'/>\n</center>\n\n<div class=\"alert alert-info\">\nSe aplican los mismo comentarios que para el algoritmo de Jacobi.\n</div>\n\n## Implementación.\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 2.**\n\n<font color=\"Black\">Haciendo uso de la función `gauss_seidel()` definida en la celda anterior, aproxima la solución del sistema de ecuaciones del Ejemplo 1. Utiliza la solución inicial `(xi, yi) =` $(-2, 2)$, una tolerancia `tol` = $1 \\times 10^{-5}$ y `kmax` = $50$ iteraciones. \nUtiliza las variables `solG`, `xs`, `ys`, `eG` e `itG` para almacenar la salida de la función `gauss_seidel()`.\nPosteriormente grafica las rectas y cómo se va calculando la solución con este método (puedes usar el mismo código que en el caso de Jacobi). Grafica también los errores para el método de Jacobi y para el de Gauss-Seidel, deberías obtener una imagen como la siguiente:\n    \n<img src='error_JGS.png' width=450px height=auto>\n</font>\n\n</div>\n\n**Cálculo de la solución con Gauss-Seidel**\n\n**Gráfica de las rectas, la solución y los pasos realizados**\n\n**Graficación de los errores de Jacobi y Gauss-Seidel**\n\n# Método de Sobrerrelajación sucesiva (*Successive Overrelaxation*, SOR)\n\n* Se obtiene apicando una extrapolación a la iteración de Gauss-Seidel.\n\n* Esta extrapolación es un promedio pesado entre la iteración actual y la anterior:\n$$\nx_i^k = \\omega \\bar{x}_i^k + (1-\\omega)x_i^{k-1}\n$$\ndonde $\\bar{x}$ denota una iteración de Gauss-Seidel y $\\omega$ es el\nfactor de extrapolación.\n\n* En términos de matrices tenemos:\n$$\n\\mathbf{x}^k = (\\mathbf{D} - \\omega \\mathbf{L})^{-1}(\\omega \\mathbf{U} + (1 - \\omega )\\mathbf{D})\\mathbf{x}^{k-1} \n+ \\omega (\\mathbf{D} - \\omega \\mathbf{L})^{-1} \\mathbf{b}\n$$\n* Elegir la $\\omega$ óptima no es simple, aunque se sabe que si $\\omega$ \nestá fuera del intervalo $(0,2)$ el método falla.\n\n## Implementación 3.\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 3.**\n\n<font color=\"Black\">Haciendo uso de la función `sor()` definida en la celda anterior, aproxima la solución del sistema de ecuaciones del Ejercicio 1. Utiliza la solución inicial `(xi, yi) =` $(-2, 2)$, una tolerancia `tol` = $1 \\times 10^{-5}$ y `kmax` = $50$ iteraciones. \nElije el valor de $\\omega = 1.09$. Utiliza las variables `solSOR`, `xs`, `ys`, `eSOR` e `itSOR` para almacenar la salida de la función `gauss_seidel()`. Posteriormente grafica las rectas y cómo se va calculando la solución con este método (puedes usar el mismo código que en el caso de Jacobi). Grafica también los errores para los tres métodos (Jacobi, Gauss-Seidel y SOR).\n    \n<img src='error_JGSSOR.png' width=450px height=auto>\n\n</font>\n\n</div>\n\n**Cálculo de la solución con SOR**\n\n**Gráfica de las rectas, la solución y los pasos realizados**\n\n<div class=\"alert alert-success\">\n\n## **Ejercicio 4.**\n\n<font color=\"Black\">Almacena los errores de los tres métodos en los archivos: `errorJacobi.npy`, `errorGaussSeidel.npy` y `errorSOR.npy` usando la función `np.save()`, checa la documentación [aquí](https://numpy.org/doc/stable/reference/generated/numpy.save.html). </font>\n</div>\n\n<div class=\"alert alert-info\">\n\n<font color=\"Black\">\n\nPrueba que tu código funciona usando:\n```\nprint('Error Jacobi = \\n{}\\n'.format(np.load('errorJacobi.npy')))\nprint('Error Gauss-Seidel = \\n{}\\n'.format(np.load('errorGaussSeidel.npy')))\nprint('Error SOR = \\n{}\\n'.format(np.load('errorSOR.npy')))\n\n```\n\n<br>La salida debería ser:\n    \n```\nError Jacobi = \n[2.98142397e+00 1.25707872e+00 ...]\n\nError Gauss-Seidel = \n[2.81091348e+00 6.24647439e-01 ...]\n\nError SOR = \n[2.60865150e+00 1.82203110e-01 ...]\n```\n</font>\n\n</div>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"07_Sol_Sis_Lin_Iter_1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"Métodos iterativos para la solución de sistemas de ecuaciones lineales"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"07_Sol_Sis_Lin_Iter_1.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"documentclass":"scrreprt","title":"Métodos iterativos para la solución de sistemas de ecuaciones lineales"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}