---
title: "Object-Oriented Programming for Science"
subtitle: "DataBrew&Coffe"
author: "Luis Miguel de la Cruz Salas"
institute: "Depto. de Recursos Naturales, IGEF-UNAM"
date: "11/07/24"
format:
  revealjs:
    incremental: false
    theme: serif_oops.scss
    code-block-height: 550px
    preview-links: false
    transition: none
    slide-number: h/v
    show-slide-number: all
    css: math.scss
    footer: "OOPS"
    logo: ./figuras/unam_igeof.png
---

## Contenido.{.scrollable}

::::{.incremental}
* <font color="FireBrick"><b>Historia</b></font>  y características de la POO
* <font color="SeaGreen"><b>Ejemplos</b></font> de la POO en Ciencia.
* <font color="DarkBlue"><b>Recomendaciones</b></font> de uso.
:::

# <font color="FireBrick"><b>Historia</b></font>

## Iniciación en la programación.

<font style="font-size:35px; color:DarkSlateGray">

::: {layout-nrow=1 layout-ncol="2"}
![**Cálculo Diferencial**, ESFM-IPN, IBM PC 5150, Microsoft BASIC](./figuras/esfm_ipn.jpg){fig-align="center"  width=100% .lightbox}

![**Mecánica Clásica**, FC-UNAM, APPLE II, AppleSoft BASIC](./figuras/prometeo.jpg){fig-align="center"  width=100% .lightbox}
:::

</font>

##  BASIC 
<font style="font-size:35px;">

**B***eginners'* **A***ll-purpose **S***ymbolic **I***nstruction **C***ode, por J.G. Kemeny y T.E. Kurtz, Dartmouth College, **1963**.

</font>

<font style="font-size:30px;">

* Herramienta para estudiantes de áreas no científicas; se popularizó en los años 70; declinó en los 90s: aparición de C y Pascal.

</font>

::::{.columns}
:::{.column width="50%"}

<font style="font-size:35px; color:DarkSlateGray">

![Mecánica Clásica, FC-UNAM, APPLE II, AppleSoft BASIC](./figuras/prometeo.jpg){fig-align="center"  width=50% .lightbox}

</font>
:::
:::{.column width="50%"}

```{.basic}
10 INPUT "What is your name: "; U$
20 PRINT "Hello "; U$
30 INPUT "How many stars do you want: "; N
40 S$ = ""
50 FOR I = 1 TO N
60 S$ = S$ + "*"
70 NEXT I
80 PRINT S$
90 INPUT "Do you want more stars? "; A$
100 IF LEN(A$) = 0 THEN GOTO 90
110 A$ = LEFT$(A$, 1)
120 IF A$ = "Y" OR A$ = "y" THEN GOTO 30
130 PRINT "Goodbye "; U$
140 END
```
:::
::::

## Turbo Pascal {.scrollable}

<font style="font-size:30px;">

Software desarrollado por Anders Hejlsberg en la compañía [Borland](https://en.wikipedia.org/wiki/Borland) con un compilador y un IDE(Integrated Development Environment).

</font>

::::{.columns}
:::{.column width="50%"}
<font style="font-size:35px; color:DarkSlateGray">

![Turbo Pascal 7.0](./figuras/Turbo_Pascal_7.jpg){fig-align="center"  width=100% .lightbox}

</font>

:::
:::{.column width="50%"}
```{.pascal}
program exProcedure;
var
   a, b, c,  min: integer;

procedure findMin(x, y, z: integer; var m: integer); 
begin
   if x < y then
      m:= x
   else
      m:= y;
   if z < m then
      m:= z;
end; { end of procedure findMin }  

begin
   writeln(' Enter three numbers: ');
   readln( a, b, c);
   findMin(a, b, c, min); (* Procedure call *)
   writeln(' Minimum: ', min);
end.
```
:::
::::

## Supercómputo en la UNAM.

<font style="font-size:35px; color:DarkSlateGray">

::: {layout-nrow=1 layout-ncol="2"}
![Cray YMP-4/64, 1992.](./figuras/cray_ymp.png){fig-align="center"  width=85% .lightbox}

![Plan de becarios en supercómputo, 1ra Generación, 1993.](./figuras/becario_supercomputo.png){fig-align="center"  width=85% .lightbox}
:::

</font>

<font style="font-size:35px">

* FORTRAN 77 (*Formula Translating System*).
* Lenguaje C, desarrollado por Dennis Ritchie 1969 y 1972 en los Laboratorios Bell.

</font>

## Convección Natural.{.scrollable}

```{.fortran}
      PROGRAM ROT                                                               
CC    History:                                                                  
CC    The program rot was originated at the Universidad Iberoamericana and      
CC    is a modification of the program 3Dbox which in turn                      
CC    is the last heir of a series of codes written by Professor K.T. Yang      
CC    and his students over the last 15 years. The author of 3Dbox is Dr        
CC    Devadata Mukutmoni.                                                      
CC    In September 1991 the code was transferred to Solar Energy Laboratory     
CC    of the University of Mexico.                                              
CC    Comments added in Mexico are denoted by double C.                         
C                                                               
...                                                                            
C     THIS PROGRAM SOLVES THREE DIMENSIONAL BUOYANCY DRIVEN FLOWS IN            
C     A RECTANGULAR CAVITY.                                                     
CC    THE CAVITY IS ASSUMED TO BE ROTATING ARROUND THE VECTOR OMEGA             
...
      common/bl1/ dx,dy,dz,dxy,dyz,dzx,vol,dtime,voldt,ra,pr,sorsum             
      COMMON/BL7/ NI,NIP1,NIM1,NJ,NJP1,NJM1,NK,NKP1,NKM1,                       
     &            NIP2,NJP2,NKP2,ITER,NNMAX                                     
CC
      common/bl31/ tod(24,24,24),uod(24,24,24),vod(24,24,24),                   
     &             wod(24,24,24),pod(24,24,24)                                  
      common/bl32/ t(24,24,24)  ,u(24,24,24)  ,v(24,24,24),                     
     &             w(24,24,24)  ,p(24,24,24)                                    
      common/bl33/ tpd(24,24,24),upd(24,24,24),vpd(24,24,24),                   
     &             wpd(24,24,24),ppd(24,24,24)                                  
      common/bl34/ smp(24,24,24),resorm(93),thot,tcool,                         
     &             du(24,24,24),dv(24,24,24),                                   
     &             dw(24,24,24),pp(24,24,24)                                    
      common/bl36/ ap(24,24,24),
     &             ae(24,24,24),aw(24,24,24),                                   
     &             an(24,24,24),as(24,24,24),                                   
     &             af(24,24,24),ab(24,24,24),
     &             sp(24,24,24),su(24,24,24)                                             
CC                                                                              
      COMMON/BL101/GX1U                                                         
      COMMON/BL102/RAR,OX,OY,OZ,OMEGAX0,OMEGAY0,OMAGS                           
      COMMON/BL103/TA                                                           
      COMMON/BL201/GY1U                                                         
      COMMON/BL301/GZ1U                                                         
CC                                                                              
      common/mean/t_mean(24,24,24),u_mean(24,24,24),                            
     &            v_mean(24,24,24),w_mean(24,24,24),                            
     &            p_mean(24,24,24)                                              
      COMMON/ASP/AX,AZ,EPS                                                      
      COMMON/ERROR/IMAX                                                         
      common/count/nt,nmax
CC
      DIMENSION UU(40000),VV(40000),WW(40000)                                   
      DIMENSION VECTOR(3,24,24,24)
CC    DIMENSION VORT1(3,24,24,24)
CC    DIMENSION VORT(3,24,24,24)
CC    DIMENSION FCOR(3,24,24,24)
CC
      DATA sormax,itmax/2.00,5/                                                 
      DATA pi,roll/3.14159265359,2.0/   
CC
      CHARACTER*16 ARCH8, ARCH9, ARCH10, TIEMPO
      CHARACTER*16 ARCH32, ARCH33, ARCH37
      ARCH8 = 'TEMP.'
      ARCH9 = 'VELC.'
CC    ARCH10 = 'FCOR.'
      ARCH32 = 'JTEMP.'
      ARCH33 = 'JVELC.'
CC    ARCH37 = 'VORT.'

...

c                                                                               
c     FOR CONTINUING RUN, READ FROM DATASET    
c 
      if(krun .eq. 1) then
        do 1370 k=1,nkp1
        do 1370 j=1,njp1
        do 1370 i=1,nip1
         read(30,3030) tod(i,j,k),uod(i,j,k),vod(i,j,k),
     &                            wod(i,j,k),pod(i,j,k)
 1370   continue
      else
         do 220 j=1,njp1                                                        
           yy = (float(j) - 1.5) / float(nim1)                                  
           do 220 i=1,nip1                                                      
              do 220 k=1,nkp1                                                   
                 uod(i,j,k) = 0.                                                
                 u(i,j,k) = 0.                                                  
                 upd(i,j,k) = 0.                                                
                 vod(i,j,k) = 0.                                                
                 v(i,j,k) = 0.                                                  
                 vpd(i,j,k) = 0.                                                
                 w(i,j,k) = 0.                                                  
                 wpd(i,j,k) = 0.                                                
                 wod(i,j,k) = 0.                                                
                 pod(i,j,k) = 0.                                                
                 p(i,j,k) = 0.                                                  
                 ppd(i,j,k) = 0.                                                
                 du(i,j,k) = 0.                                                 
                 dv(i,j,k) = 0.                                                 
                 dw(i,j,k) = 0.                                                 
                 su(i,j,k) = 0.                                                 
                 sp(i,j,k) = 0.                                                 
                 pp(i,j,k) = 0.                                                 
                 ap(i,j,k) = 0.                                                 
                 aw(i,j,k) = 0.                                                 
                 ae(i,j,k) = 0.                                                 
                 as(i,j,k) = 0.                                                 
                 smp(i,j,k) = 0.                                                
CC               tod(i,j,k) = 0.5 - yy                                          
                 tod(i,j,k) = 0.                                          
                 t(i,j,k) = tod(i,j,k)                                          
                 tpd(i,j,k) = tod(i,j,k)                                        
                 T_MEAN(I,J,K) = 0.                                             
                 U_MEAN(I,J,K) = 0.                                             
                 V_MEAN(I,J,K) = 0.                                             
                 W_MEAN(I,J,K) = 0.                                             
                 P_MEAN(I,J,K) = 0.                                             
  220         continue                                                    
                 an(i,j,k) = 0.                                                       
c                                                                               
c        AMPLITUDE OF PERTURBATIONS                                             
c                                                                               
       A1 = 1. / AX                                                      
       ROLL = 1.0
       YPER = ROLL * XPER / AX                                           
c
c	 Defasamiento en las componentes de la velocidad
c	 de la perturbacion para obtener un rollo simetrico.
c
       DF1 = 1.5
       DF2 = 1.5
c                                                                               
c        U VELOCITY PERTURBATIONS                                               
c                                                                               
       do 230 k=2,nk                                                            
          DO 230 J=2,NJ                                                         
             DO 230 I=2,NI                                                      
                U(I,J,K) = - XPER * COS(PI * DY * (FLOAT(J) - DF1))             
     &                * SIN(ROLL * PI * DX * A1 * (FLOAT(I) - DF2))           
                UOD(I,J,K) = U(I,J,K)                                           
                UPD(I,J,K) = U(I,J,K)                                           
 230  CONTINUE                                                                  
c                                                                               
c        V VELOCITY PERTURBATIONS                                               
c                                                                              
       do 235 k=2,nk                                                            
          DO 235 J=2,NJ                                                         
             DO 235 I=2,NI                                                      
                V(I,J,K) = YPER * SIN(PI * DY * (FLOAT(J) - DF2))               
     &              * COS(ROLL * PI * DX * A1 * (FLOAT(I) - DF1))               
                VOD(I,J,K) = V(I,J,K)                                           
                VPD(I,J,K) = V(I,J,K)                                           
 235   continue                                                                 
      endif                                                                     
c                                                                               
c          SET THE HOT AND COLD WALL TEMPERATURE                                
c                                                                               
      thot = 0.5                                                                
      TCOOL = - 0.5                                                             
c                                                                               
c          SET THE VELOCITIES OUTSIDE THE COMPUTATIONAL                         
c                DOMAIN TO ZERO                                                 
c                                                                               
      do 505 i=1,nip1                                                           
         DO 505 J=1,NJP1                                                        
            UOD(I,J,1) = 0.                                                     
            UOD(I,J,NKP1) = 0.                                                  
            VOD(I,J,1) = 0.                                                     
            VOD(I,J,NKP1) = 0.                                                  
            WOD(I,J,1) = 0.                                                     
            WOD(I,J,2) = 0.                                                     
            WOD(I,J,NKP1) = 0.                                                  
  505 continue                                                                  
      do 510 i=1,nip1                                                           
         DO 510 K=1,NKP1                                                        
            UOD(I,1,K) = 0.                                                     
            UOD(I,NJP1,K) = 0.                                                  
            VOD(I,1,K) = 0.                                                     
            VOD(I,2,K) = 0.                                                     
            VOD(I,NJP1,K) = 0.                                                  
            WOD(I,1,K) = 0.                                                     
            WOD(I,NJP1,K) = 0.                                                  
  510 CONTINUE                                                                  
      do 520 j=1,njp1                                                           
         DO 520 K=1,NKP1                                                        
            UOD(1,J,K) = 0.                                                     
            UOD(2,J,K) = 0.                                                     
            UOD(NIP1,J,K) = 0.                                                  
            VOD(1,J,K) = 0.                                                     
            VOD(NIP1,J,K) = 0.                                                  
            WOD(1,J,K) = 0.                                                     
            WOD(NIP1,J,K) = 0.                                                  
  520 continue                                                                  
c                                                                               
c        INITIALISE u,v,w,t,p                                                   
c                                                                               
      do 210 k=1,nkp1                                                           
         do 210 j=1,njp1                                                        
            do 210 i=1,nip1                                                     
               t(i,j,k) = tod(i,j,k)                                            
               u(i,j,k) = uod(i,j,k)                                            
               v(i,j,k) = vod(i,j,k)                                            
               w(i,j,k) = wod(i,j,k)                                            
               p(i,j,k) = pod(i,j,k)                                            
  210 continue    

...
c                                                                               
c    THE MAIN TIME MARCHING LOOP BEGINS HERE                                    
c   

...

  300 continue                                                                  
c                                                                               
      nt = nt + 1                                                               
CC                                                                              
      PRINT *, 'TIME STEP =',NT     

...

      xtime = xtime + dtime                                                     
c                                                                               
c        START CALCULATIONS                                                     
c  

...

      call calt                                                                 
c                                                                               
      do 2220 i=1,nip1                                                          
         do 2220 k=1,nkp1                                                       
            do 2220 j=2,nj                                                      
               IF (T(I,J,K) .LT. TCOOL) T(I,J,K) = TCOOL                        
               IF (T(I,J,K). GT. THOT) T(I,J,K) = THOT                          
 2220 continue                                     

 ...

 c                                                                               
c        PRESSURE CORRECTION LOOP                                               
c                                                                               
  301 continue                                                                  
      ITER = ITER + 1                                                           
c                                                                               
      call calu                                                                 
c                                                                               
      call calv                                                                 
c                                                                               
      call calw                                                                 
c                                                                               
      call calp                                                                 
c                 

...

      if(resorm(iter) .le. sormax) go to 49                                     
      if(iter .eq. 1) go to 302                                                 
      if(resorm(iter) .le. resorm(iter-1)) go to 302                            
      go to 304                                                                 
  302 if(jterm .ge. 2) go to 37                                                 
      source=resorm(iter)                                                       
      go to 39                                                                  
   37 if(resorm(iter) .le. source) go to 38                                     
      go to 304                                                                 
   38 source=resorm(iter)                                                       
   39 continue                                                                  
      do 23 k=1,nkp1                                                            
         do 23 j=1,njp1                                                         
            do 23 i=1,nip1                                                      
               tpd(i,j,k) = t(i,j,k)                                            
               upd(i,j,k) = u(i,j,k)                                            
               vpd(i,j,k) = v(i,j,k)                                            
               wpd(i,j,k) = w(i,j,k)                                            
               ppd(i,j,k) = p(i,j,k)                                            
   23 continue                                                                  
      jjterm=0                                                                  
      if(iter .eq. itmax) go to 49                                              
      if(jterm .eq. 2) go to 35                                                 
      if(iter .eq. 4) go to 29                                                  
   35 continue                                                                  
      if(jterm .eq. 3) go to 58                                                 
      if(iter .eq. 7) go to 29                                                  
   58 continue                                                                  
      jjterm=0                                                                  
      go to 301                                                                 
  304 continue                                                                  
      jjterm=jjterm+1                                                           
      if(jterm .eq. 1) go to 41                                                 
      if(jterm .eq. 2 .and. jjterm .eq. 1 .and. iter .ne. 5) go to 41           
      go to 82                                                                  
   41 continue                                                                  
      do 40 k=1,nkp1                                                            
         do 40 j=1,njp1                                                         
            do 40 i=1,nip1                                                      
               u(i,j,k) = upd(i,j,k)                                            
               v(i,j,k) = vpd(i,j,k)                                            
               w(i,j,k) = wpd(i,j,k)                                            
               p(i,j,k) = ppd(i,j,k)                                            
   40 continue                                                                  
      if(iter .eq. itmax) go to 49                                              
      go to 29                                                                  
   82 continue                                                                  
      do 43 k=1,nkp1                                                            
         do 43 j=1,njp1                                                         
            do 43 i=1,nip1                                                      
               t(i,j,k) = tpd(i,j,k)                                            
               u(i,j,k) = upd(i,j,k)                                            
               v(i,j,k) = vpd(i,j,k)                                            
               w(i,j,k) = wpd(i,j,k)                                            
               p(i,j,k) = ppd(i,j,k)                                            
   43 continue                                                                  
      if(iter .eq. itmax) go to 49                                              
      if((jterm .eq. 3 .and. iter .ne. 8) .or. jjterm .eq. 2) go to 49          
      go to 301                                                                 
   49 continue                                                                  
c                                                                               
      II = NIP1 / 3                                                             
      JJ = NJP1 / 3                                                             
      KK = NKP1 / 3                                                             
      uu(nt) = u(ii,jj,kk)                                                      
      vv(nt) = v(ii,jj,kk)                                                      
      ww(nt) = w(ii,jj,kk)                                                      

... 

     go to 300

CC  Hay que cerrar los archivos abiertos

      CLOSE(12)
      CLOSE(13)
      CLOSE(14)
      CLOSE(15)
      CLOSE(16)
      CLOSE(17)
      CLOSE(18)
      CLOSE(19)
      CLOSE(20)
      CLOSE(30)
      CLOSE(31)
      CLOSE(34)
      CLOSE(35)
      end             

c *********************************************************************         
      subroutine calt                                                           
      common/bl1/dx,dy,dz,dxy,dyz,dzx,vol,dtime,voldt,ra,pr,sorsum              
      common/bl7/ni,nip1,nim1,nj,njp1,njm1,nk,nkp1,nkm1                         
     &  ,NIP2,NJP2,NKP2,ITER,NNMAX                                              
      common/bl31/ tod(24,24,24),uod(24,24,24),vod(24,24,24),                   
     &             wod(24,24,24),pod(24,24,24)                                  
      common/bl32/ t(24,24,24)  ,u(24,24,24)  ,v(24,24,24),                     
     &             w(24,24,24)  ,p(24,24,24)                                    
      common/bl33/ tpd(24,24,24),upd(24,24,24),vpd(24,24,24),                   
     &             wpd(24,24,24),ppd(24,24,24)                                  
      common/bl34/smp(24,24,24),resorm(93),thot,tcool,                          
     &     du(24,24,24),dv(24,24,24)                                            
     &    ,dw(24,24,24),pp(24,24,24)                                            
      common/bl36/ap(24,24,24),ae(24,24,24),                                    
     &       aw(24,24,24),an(24,24,24),                                         
     &        as(24,24,24),af(24,24,24),ab(24,24,24)                            
     &   ,sp(24,24,24),su(24,24,24)                                             
      common/mean/t_mean(24,24,24),u_mean(24,24,24),                            
     &            v_mean(24,24,24),w_mean(24,24,24),                            
     &            p_mean(24,24,24)                                              
c                                                                               
c         CALCULATE COEFFICIENTS                                                
c                                                                               
...
```

<font style="font-size:35px; color:DarkSlateGray">

![Convección natural en una cavidad rotatoria, 1996.](./figuras/conveccion.png){fig-align="center"  width=75% .lightbox}

</font>


## Simula

::::{.columns}
:::{.column width="60%"}

<font style="font-size:30px;">

* **Simula I** (1962) desarrollado en el [Norwegian Computing Center](https://nr.no/en/) de Oslo, Noruega, por **Ole-Johan Dahl** y **Kristen Nygaard**.

  - Orientado a la simulación de sistemas.
  
  - Basado en ALGOL 60. 
  
  - Introdujo conceptos innovadores: **objetos**, **clases**, **subclases** y **procedimientos virtuales**.

* **Simula 67** de propósito general.
  - Influyó en el desarrollo de otros lenguajes OO como **C++**, **Smalltalk** y **Objective-C**.


</font>

:::
:::{.column width="40%"}

```{.simula}
BEGIN
  CLASS Machine {
    busy: BOOLEAN;
    productionTime: REAL;
  }
  
  CLASS Material {
    quantity: INTEGER;
  }
  
  PROCEDURE produce() {
    machine := NEW Machine;
    machine.busy := TRUE;
    // ...
  }
  
  PROCEDURE consumeMaterial() {
    material := NEW Material;
    material.quantity := 10;
    // ...
  }
  
  MAIN {
    // Simulate 5 machines producing for 10 hours
    FOR i := 1 TO 5 {
      produce();
    }
    // Simulate material consumption
    FOR i := 1 TO 10 {
      consumeMaterial();
    }
  }
END
```
:::
::::


# <font color="SeaGreen"><b>Ejemplos</b></font>

* the hell

## Slide 2.1

* are

## Slide 2.2

* you


# <font color="DarkBlue"><b>Recomendaciones</b></font>

## H. {.scrollable}

Empezaremos con <font color="DarkSlateGray"><b>aplicaciones simples</b></font> y las resolveremos con los elementos del lenguaje.

. . .

::::{.columns}

**Por ejemplo:**

:::{.column width="50%"}
$$
\begin{eqnarray}
\text{peso} & = & 80 \;\; \text{kg} \\
\text{estatura} & = & 1.78 \;\; \text{m}
\end{eqnarray}
$$
:::
:::{.column width="50%"}
$$
\text{IMC} = \frac{\text{peso}}{\text{estatura}^2}
$$
:::
::::

. . .

::::{.columns}

:::{.column width="50%"}
**Implementación:**

```{.python}
peso = 80 # [kg]
estatura = 1.78 # [m]

IMC = peso / estatura**2

print("IMC = ", IMC)

```
:::
:::{.column width="50%"}

**Resultado:**

```


IMC =  25.24933720489837
```
:::
::::

## Diferenciadores 2. {.scrollable}

Los elementos del lenguaje los introduciremos <font color="DarkSlateGray"><b>conforme se vayan requiriendo</b></font>.

. . . 


::::{.columns}

:::{.column width="50%"}
**Por ejemplo:**

```{.python}
peso = 80 # [kg]
estatura = 1.78 # [m]

IMC = peso / estatura**2

print("IMC = ", IMC)

```
:::
:::{.column width="50%"}
**Elementos importantes:**

<font style="font-size:30px; color:DarkSlateGray">
<ul>
<li>Variables.</li>
<li>Tipos y Tipado dinámico.</li>
<li>Operadores.</li>
<li>Funciones incorporadas.</li>
<li>Comentarios.</li>
</ul>
</font>
:::

::::

## Diferenciadores 3. {.scrollable}

* Iremos desde un nivel básico hasta uno en donde los problemas tengan alguna aplicación real.

. . .

::::{.columns}
:::{.column width="35%"}
**Por ejemplo**:

<font style="font-size:30px; color:DarkSlateGray">
Contar las palabras y letras del primer capítulo del libro "El ingenioso Hidalgo Don Quijote de la Mancha". Contar las vocales y calcular su porcentaje de aparición con respecto del total.
</font>

:::
:::{.column width="2%"}
:::
:::{.column width="63%"}

<font style="font-size:20px; color:DarkSlateGray">
**Capítulo primero. Que trata de la condición y ejercicio del famoso y valiente hidalgo don Quijote de la Mancha.**
En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivía un hidalgo de 
los de lanza en astillero, adarga antigua, rocín flaco y galgo corredor. Una olla de algo más vaca que 
carnero, salpicón las más noches, duelos y quebrantos los sábados, lantejas los viernes, algún palomino 
de añadidura los domingos, consumían las tres partes de su hacienda. El resto della concluían sayo de 
velarte, calzas de velludo para las fiestas, con sus pantuflos de lo mesmo, y los días de entresemana se 
honraba con su vellorí de lo más fino. ...
</font>
:::
::::

. . .

**Implementación:**

```{.python}
archivo = open("Don_Quijote.txt")           # Archivo
total_palabras = 0                          # Número entero
total_letras = 0                            # Número entero
vocal = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0} # Diccionario
texto = []                                  # Lista vacía

# Lee línea por línea
for línea in archivo:
    # Cuenta las palabras
    for palabra in línea.split():
        total_palabras += 1
        # Cuenta las letras
        for letra in palabra:
            total_letras += 1
            # Cuenta vocales
            vocal['a'] += 1 if letra == 'a' else 0
            vocal['e'] += 1 if letra == 'e' else 0
            vocal['i'] += 1 if letra == 'i' else 0
            vocal['o'] += 1 if letra == 'o' else 0
            vocal['u'] += 1 if letra == 'u' else 0
    texto.append(línea)

print("-"*40 + "\n{:^40s}\n".format("Resultado") + "-"*40)
print(f'Total palabras = {total_palabras}')
print(f'Total letras = {total_letras}')

# Imprime el total de vocales y calcula el porcentaje
[print(f'{k} = {vocal[k]}, ({vocal[k] / total_letras:5.3%})') for k in vocal]
print("-"*40 + "\n{:^40s}\n".format("Texto") + "-"*40)
# Imprime el texto
[print(línea, end="") for línea in texto]
 
archivo.close()
```
. . .

**Resultado**:
```
----------------------------------------
               Resultado                
----------------------------------------
Total palabras = 919
Total letras = 4239
a = 524, (12.361%)
e = 531, (12.527%)
i = 180, (4.246%)
o = 361, (8.516%)
u = 184, (4.341%)
----------------------------------------
                 Texto                  
----------------------------------------
Capítulo primero

Que trata de la condición y ejercicio del famoso y valiente hidalgo don Quijote de la Mancha

En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivía un hidalgo ...

...

Diera él, por dar una mano de coces al traidor de Galalón, al ama que tenía, y aun a su sobrina de añadidura.

```
## Diferenciadores 4. {.scrollable}

* De inicio no requieres instalar nada en tu computadora, pues haremos uso de la plataforma <font style="color:DarkSlateGray"><b>MACTI</b></font>.

. . .

::: {layout-nrow=2 layout-ncol="3"}
![MACTI main](./figuras/macti01.png){fig-align="left"  width=75% .lightbox}

![MACTI menú](./figuras/macti02.png){fig-align="left"  width=75% .lightbox}

![MACTI IGEF](./figuras/macti03.png){fig-align="left"  width=75% .lightbox}

![MACTI Moodle](./figuras/macti_moodle_igf.png){fig-align="left"  width=75% .lightbox}

![MACTI Jupyterhub](./figuras/macti_jupyterhub_igf.png){fig-align="left"  width=75% .lightbox}

![MACTI Forgejo](./figuras/macti_forgejo.png){fig-align="left"  width=75% .lightbox}
:::

## Diferenciadores 5. {.scrollable}

* En esta plataforma podrás realizar algunos ejercicios, los cuales te darán retroalimentación inmediata cuando algo no salga correctamente.

. . .

**Evaluación formativa**.

::: {layout-nrow=2 layout-ncol="4"}
![](./figuras/macti_evaluacion_01.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_02.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_03.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_04.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_05.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_06.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_07.png){fig-align="center"  width=50% .lightbox}

![](./figuras/macti_evaluacion_08.png){fig-align="center"  width=50% .lightbox}
:::

## Diferenciadores 6. {.scrollable}

* Te proporcionaremos mucho material para practicar, pues solo practicando es como se aprende un nuevo lenguaje.

. . .

**Notebooks**.

![](./figuras/macti_material_introPython.png){fig-align="center"  width=50% .lightbox}

## Diferenciadores 7. {.scrollable}

::: {.incremental}
* Será un curso muy interactivo centrado en los participantes, el instructor será un facilitador que resolverá dudas e irá llevando el ritmo de cada clase.

* Haremos una breve introducción a [Git](https://git-scm.com/) y [GitHub](https://github.com/) para gestionar software.

* Al final del curso te diremos como instalar Python en tu computadora usando [Anaconda](https://www.anaconda.com/download).
:::


## Otros objetivos.{.scrollable}

. . .

![](./figuras/thinking_writing.jpg){fig-align="center"  width=75% .lightbox}

![](./figuras/1st_rule_programming.jpg){fig-align="center"  width=50% .lightbox}

![](./figuras/my_own_code.jpg){fig-align="center"  width=65% .lightbox}

. . .

::::{.columns}
:::{.column width="50%"}
![](./figuras/chat_gpt_add.jpg){fig-align="center"  width=85% .lightbox}
:::
:::{.column width="50%"}

![](./figuras/AI_more_original_than_researchers.jpg){fig-align="center"  width=85% .lightbox}

:::
::::

<font style="font-size:30px;">

[Do AI models produce more original ideas than researchers?^[1]](https://www.nature.com/articles/d41586-024-03070-5)

[1] [Si, C., Yang, D. & Hashimoto, T. Preprint at arXiv (2024)](https://doi.org/10.48550/arXiv.2409.04109).

</font>

# <font style="font-size:100px; color:DarkSlateGray">¡¡Empecemos!!</font>

## Tour por MACTI

* Checar las cuentas en:
  - MACTI
  - GitHub
  - ChatGPT
  - Clonar el repositorio
    ```{.bash code-line-numbers="false"}
    git clone https://github.com/repomacti/introduccion_python.git
    
    ```
  - Git y GitHub