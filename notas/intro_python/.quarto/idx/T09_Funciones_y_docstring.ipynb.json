{"title":"Funciones y docstring.","markdown":{"yaml":{"title":"Funciones y docstring."},"headingText":"Definición de funciones","containsRefs":false,"markdown":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n\nLas funciones son la primera forma de estructurar un programa. Esto nos lleva al paradigma de programación estructurada, junto con las construcciones de control de flujo. Las funciones nos permiten agrupar y reutilizar líneas de código.\n\nLa sintáxis es:\n\n```python\ndef nombre_de_la_función(parm1, parm2, ...):\n    bloque_de_código\n    return resultado\n```\n\nUna vez definida la función, es posible ejecutarla (hacer una llamada a la función) como sigue:\n\n```python\nnombre_de_la_función(arg1, arg2, ...)\n```\n\nTambién es posible hacer lo siguiente:\n\n\n\nEn ambos casos, la función regresa un resultado debido a que existe la declaración `return` dentro de la función. Este resultado puede ser referenciado por una variable haciendo lo siguiente:\n\n```python\nvariable = nombre_de_la_función(arg1, arg2, ...)\n```\n\nLa `variable` puede ser utilizada posteriormente para otros cálculos.\n\nObserva que:\n* Cuando se define la función, se definen los **parámetros** que recibirá, en este caso `param1`, `param2`, `...`\n* Cuando se ejecuta la función, se pasan los valores los `arg1`, `arg2`, `...`, los cuales son los **argumentos** de la ejecución y serán sustituidos en los parámetros de la función.\n\nVeamos un ejemplo simple:\n\nVeamos ahora un ejemplo más interesante\n\nObserva que esta función no regresa ningún valor, solo imprime en pantalla un valor conforme lo calcula.\n\nLe podemos poner otro nombre a la función\n\nObservamos que se puede ejecutar la función `fib()` a través de `Fibonacci()` y que ambos nombres hacen referencia a la misma función.\n\n# Ámbitos\n\nLas funciones (y otros operadores también), crean su propio ámbito, de tal manera que las etiquetas declaradas dentro de funciones son locales.\n\nPara usar el objeto global dentro de la función debemos usar `global`\n\n# Retorno de una función\n\nComo se mencionó antes, la declaración `return`, dentro de una función, regresa un objeto que en principio contiene el resultado de las operaciones realizadas por la función.\n\nVeamos un ejemplo.\n\n# Argumentos por omisión\n\nLos parámetros de una función pueden tener valores (argumentos) por omisión, es decir, si no se da un valor para uno de los parámetros, entonces se toma el valor definido por omisión. Esto crea una función que se puede llamar con menos argumentos de los que está definida inicialmente. \n\nPor ejemplo:\n\nUna función puede tener más de un argumento por omisión. Todos los parámetros que tienen argumentos por omisión deben estar al final de la lista en la declaración de la función.\n\nPor ejemplo:\n\n# Argumentos posicionales y `keyword`\nUn **argumento** es el valor que se le pasa a una función cuando se llama. Hay dos tipos de argumentos:\n\n***Positional argument*** :\n\n1. Un argumento que no es precedido por un identificador: `verticalThrow(3, 50)`\n    \n2. Un argumento que es pasado en una tupla precedido por `*`: `verticalThrow(*(3, 50))`.\n\n  En este caso, el `*` indica a Python que la tupla `(3, 50)` debe desempacarse cuando se reciba en la función, de tal manera que `3` será el primer argumento y `5` el segundo.\n\n  La llamada a la función del punto 2 es equivalente a la del punto 1. \n  \n***Keyword argument*** :\n\n3. Un argumento precedido por un identificador. `verticalThrow(t=3, v0=50)`\n    \n4. Un argumento que se pasa en un diccionario precedido por `**`:`verticalThrow(**{'t': 3, 'v0': 50})`.\n\n  En este caso, el `**` indica a Python que el diccionario `{'t': 3, 'v0': 50}` debe desempacarse cuando se reciba en la función. Observa que el diccionario contiene dos pares clave-valor: `'t': 3` y `'v0': 50`. \n  \n  La llamada a la función del punto 4 es equivalente a la del punto 3. \n\nVeamos los ejemplos en código:\n\nPrimer recordemos que la firma de la función es `def verticalThrow(t, v0 = 20):` es decir, el primer parámetro es `t` y el segundo `v0`.\n\n# Número variable de parámetros\n\nDada la funcionalidad descrita en la sección anterior, es posible que una función reciba un número variable de argumentos.\n\n# Funciones como parámetros de otras funciones.\n\nLas funciones pueden recibir como argumentos objetos muy complejos, incluso otras funciones. Veamos un ejemplo simple:\n\n<div class=\"alert alert-info\">\n\n### **Ejemplo 1. Integración numérica.**\n\n<font color=\"Black\">\n\nEn este ejemplo el objetivo es crear un función que recibirá como argumentos la funcióm matemática a integrar, los límites de integración y el número de puntos para realizar la integración. Regresará como resultado un número que es la aproximación de la integral.\n\n</div>\n\n# Funciones que regresan otra función.\n\nComo vimos antes, una función puede regresar un objeto de cualquier tipo, incluyendo una función. Veamos un ejemplo:\n\n<div class=\"alert alert-info\">\n\n### **Ejemplo 2. Polinomios de segundo grado.**\n\n<font color=\"Black\">\n\nImplementar una fábrica de polinomios de segundo grado: \n\n$$\np(x) = a x^2 + b x + c\n$$\n\n</div>\n\n<div class=\"alert alert-info\">\n\n### **Ejemplo 2. Polinomios de cualquier grado.**\n\n<font color=\"Black\">\n\nImplementar una fábrica de polinomios de cualquier grado: \n\n$$\n\\sum\\limits_{k=0}^{n} a_k x^k = a_n x^n + a_{n-1} x^{n-1} + \\dots + a_1 x + a_0 \n$$\n\n</div>\n\n\n# Documentación con *docstring*\n\nPython ofrece dos tipos básicos de comentarios para documentar el código:\n\n1. Lineal.<br>\nEste tipo de comentarios se llevan a cabo utilizando el símbolo especial `#`. El intérprete de Python sabrá que todo lo que sigue delante de este símbolo es un comentario y por lo tanto no se toma en cuenta en la ejecución:\n\n```python\na = 10 # Este es un comentario\n\n```\n\n2. Docstrings<br>\nEn programación, un *docstring* es una cadena de caracteres embedidas en el código fuente, similares a un comentario, para documentar un segmento de código específico. A diferencia de los comentarios tradicionales, las docstrings no se quitan del código cuando es analizado, sino que son retenidas a través de la ejecución del programa. Esto permite al programador inspeccionar esos comentarios en tiempo de ejecución, por ejemplo como un sistema de ayuda interactivo o como metadatos. En Python se utilizan las triples comillas para definir un *docstring*.\n\n```python\ndef funcion(x):\n    '''\n    Esta es una descripción de la función ...\n    '''\n    \ndef foo(y):\n    \"\"\"\n    También de esta manera se puede definir una docstring\n    \"\"\"\n   \n```\n\n\nExisten diferentes estilos de documentación tipo *docstring* vease por ejemplo: [Numpy](https://numpydoc.readthedocs.io/en/latest/format.html), [Matplotlib](https://matplotlib.org/devdocs/devel/document.html#example-docstring).\n\nPara más información véase [PEP 257 – Docstring Conventions](https://peps.python.org/pep-0257/) y [PEP 8 – Style Guide for Python Code](https://peps.python.org/pep-0008/).\n\n","srcMarkdownNoYaml":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n# Definición de funciones\n\nLas funciones son la primera forma de estructurar un programa. Esto nos lleva al paradigma de programación estructurada, junto con las construcciones de control de flujo. Las funciones nos permiten agrupar y reutilizar líneas de código.\n\nLa sintáxis es:\n\n```python\ndef nombre_de_la_función(parm1, parm2, ...):\n    bloque_de_código\n    return resultado\n```\n\nUna vez definida la función, es posible ejecutarla (hacer una llamada a la función) como sigue:\n\n```python\nnombre_de_la_función(arg1, arg2, ...)\n```\n\nTambién es posible hacer lo siguiente:\n\n\n\nEn ambos casos, la función regresa un resultado debido a que existe la declaración `return` dentro de la función. Este resultado puede ser referenciado por una variable haciendo lo siguiente:\n\n```python\nvariable = nombre_de_la_función(arg1, arg2, ...)\n```\n\nLa `variable` puede ser utilizada posteriormente para otros cálculos.\n\nObserva que:\n* Cuando se define la función, se definen los **parámetros** que recibirá, en este caso `param1`, `param2`, `...`\n* Cuando se ejecuta la función, se pasan los valores los `arg1`, `arg2`, `...`, los cuales son los **argumentos** de la ejecución y serán sustituidos en los parámetros de la función.\n\nVeamos un ejemplo simple:\n\nVeamos ahora un ejemplo más interesante\n\nObserva que esta función no regresa ningún valor, solo imprime en pantalla un valor conforme lo calcula.\n\nLe podemos poner otro nombre a la función\n\nObservamos que se puede ejecutar la función `fib()` a través de `Fibonacci()` y que ambos nombres hacen referencia a la misma función.\n\n# Ámbitos\n\nLas funciones (y otros operadores también), crean su propio ámbito, de tal manera que las etiquetas declaradas dentro de funciones son locales.\n\nPara usar el objeto global dentro de la función debemos usar `global`\n\n# Retorno de una función\n\nComo se mencionó antes, la declaración `return`, dentro de una función, regresa un objeto que en principio contiene el resultado de las operaciones realizadas por la función.\n\nVeamos un ejemplo.\n\n# Argumentos por omisión\n\nLos parámetros de una función pueden tener valores (argumentos) por omisión, es decir, si no se da un valor para uno de los parámetros, entonces se toma el valor definido por omisión. Esto crea una función que se puede llamar con menos argumentos de los que está definida inicialmente. \n\nPor ejemplo:\n\nUna función puede tener más de un argumento por omisión. Todos los parámetros que tienen argumentos por omisión deben estar al final de la lista en la declaración de la función.\n\nPor ejemplo:\n\n# Argumentos posicionales y `keyword`\nUn **argumento** es el valor que se le pasa a una función cuando se llama. Hay dos tipos de argumentos:\n\n***Positional argument*** :\n\n1. Un argumento que no es precedido por un identificador: `verticalThrow(3, 50)`\n    \n2. Un argumento que es pasado en una tupla precedido por `*`: `verticalThrow(*(3, 50))`.\n\n  En este caso, el `*` indica a Python que la tupla `(3, 50)` debe desempacarse cuando se reciba en la función, de tal manera que `3` será el primer argumento y `5` el segundo.\n\n  La llamada a la función del punto 2 es equivalente a la del punto 1. \n  \n***Keyword argument*** :\n\n3. Un argumento precedido por un identificador. `verticalThrow(t=3, v0=50)`\n    \n4. Un argumento que se pasa en un diccionario precedido por `**`:`verticalThrow(**{'t': 3, 'v0': 50})`.\n\n  En este caso, el `**` indica a Python que el diccionario `{'t': 3, 'v0': 50}` debe desempacarse cuando se reciba en la función. Observa que el diccionario contiene dos pares clave-valor: `'t': 3` y `'v0': 50`. \n  \n  La llamada a la función del punto 4 es equivalente a la del punto 3. \n\nVeamos los ejemplos en código:\n\nPrimer recordemos que la firma de la función es `def verticalThrow(t, v0 = 20):` es decir, el primer parámetro es `t` y el segundo `v0`.\n\n# Número variable de parámetros\n\nDada la funcionalidad descrita en la sección anterior, es posible que una función reciba un número variable de argumentos.\n\n# Funciones como parámetros de otras funciones.\n\nLas funciones pueden recibir como argumentos objetos muy complejos, incluso otras funciones. Veamos un ejemplo simple:\n\n<div class=\"alert alert-info\">\n\n### **Ejemplo 1. Integración numérica.**\n\n<font color=\"Black\">\n\nEn este ejemplo el objetivo es crear un función que recibirá como argumentos la funcióm matemática a integrar, los límites de integración y el número de puntos para realizar la integración. Regresará como resultado un número que es la aproximación de la integral.\n\n</div>\n\n# Funciones que regresan otra función.\n\nComo vimos antes, una función puede regresar un objeto de cualquier tipo, incluyendo una función. Veamos un ejemplo:\n\n<div class=\"alert alert-info\">\n\n### **Ejemplo 2. Polinomios de segundo grado.**\n\n<font color=\"Black\">\n\nImplementar una fábrica de polinomios de segundo grado: \n\n$$\np(x) = a x^2 + b x + c\n$$\n\n</div>\n\n<div class=\"alert alert-info\">\n\n### **Ejemplo 2. Polinomios de cualquier grado.**\n\n<font color=\"Black\">\n\nImplementar una fábrica de polinomios de cualquier grado: \n\n$$\n\\sum\\limits_{k=0}^{n} a_k x^k = a_n x^n + a_{n-1} x^{n-1} + \\dots + a_1 x + a_0 \n$$\n\n</div>\n\n\n# Documentación con *docstring*\n\nPython ofrece dos tipos básicos de comentarios para documentar el código:\n\n1. Lineal.<br>\nEste tipo de comentarios se llevan a cabo utilizando el símbolo especial `#`. El intérprete de Python sabrá que todo lo que sigue delante de este símbolo es un comentario y por lo tanto no se toma en cuenta en la ejecución:\n\n```python\na = 10 # Este es un comentario\n\n```\n\n2. Docstrings<br>\nEn programación, un *docstring* es una cadena de caracteres embedidas en el código fuente, similares a un comentario, para documentar un segmento de código específico. A diferencia de los comentarios tradicionales, las docstrings no se quitan del código cuando es analizado, sino que son retenidas a través de la ejecución del programa. Esto permite al programador inspeccionar esos comentarios en tiempo de ejecución, por ejemplo como un sistema de ayuda interactivo o como metadatos. En Python se utilizan las triples comillas para definir un *docstring*.\n\n```python\ndef funcion(x):\n    '''\n    Esta es una descripción de la función ...\n    '''\n    \ndef foo(y):\n    \"\"\"\n    También de esta manera se puede definir una docstring\n    \"\"\"\n   \n```\n\n\nExisten diferentes estilos de documentación tipo *docstring* vease por ejemplo: [Numpy](https://numpydoc.readthedocs.io/en/latest/format.html), [Matplotlib](https://matplotlib.org/devdocs/devel/document.html#example-docstring).\n\nPara más información véase [PEP 257 – Docstring Conventions](https://peps.python.org/pep-0257/) y [PEP 8 – Style Guide for Python Code](https://peps.python.org/pep-0008/).\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"T09_Funciones_y_docstring.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"Funciones y docstring."},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"T09_Funciones_y_docstring.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"documentclass":"scrreprt","title":"Funciones y docstring."},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}