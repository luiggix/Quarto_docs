{"title":"Iterables, Mapeo, Filtros y Reducciones.","markdown":{"yaml":{"title":"Iterables, Mapeo, Filtros y Reducciones."},"headingText":"Iterables","containsRefs":false,"markdown":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n\n- En Python existen objetos que contienen secuencias de otros objetos (listas, tuplas, diccionarios, etc).\n- Estos objetos se pueden recorrer usando ciclos <font color=#009500>**for ... in ...**</font> . <br>\n- A estos objetos se les conoce también como **iterables** (objetos iterables, secuencias iterables, contenedores iterables, conjunto iterable, entre otros).\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\">\n    \nCrear una cadena, una lista, una tupla, un diccionario, un conjunto y leer un archivo; posteriormente recorrer cada uno de estos iterables usando un ciclo `for`:\n\n</font>\n\n</div>\n\nObserva el caso del diccionario y del conjunto:\n* Diccionario: cuando hay claves repetidas, se sustituye el último valor que toma la clave (`'0':9`).\n* Conjunto: los elementos se ordenan, y no se admiten elementos repetidos.\n\n# Mapeo.\n\nEn análisis matemático, un *Mapeo* es una regla que asigna a cada elemento de un primer conjunto, un único elemento de un segundo conjunto:\n\n$$\n\\texttt{map} \n$$\n$$\n\\left[\n\\begin{matrix}\ns_1 \\\\\ns_2 \\\\\n\\vdots \\\\\ns_{n-1}\n\\end{matrix}\n\\right]\n\\begin{matrix}\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\vdots \\\\\n\\longrightarrow\n\\end{matrix}\n\\left[\n\\begin{matrix}\nt_1 \\\\\nt_2 \\\\\n\\vdots \\\\\nt_{n-1}\n\\end{matrix}\n\\right]\n$$\n\n## `map`\nEn Python existe la función `map(function, sequence)` cuyo primer parámetro es una función la cual se va a aplicar a una secuencia, la cual es el segundo parámetro. El resultado será una nueva secuencia con los elementos obtenidos de aplicar la función a cada elemento de la secuencia de entrada.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 2.**\n\n<font color=\"Black\">\n\nCrear el siguiente mapeo con una lista, una tupla, un conjunto\n$$\nf(x) = x^2 \n$$\n$$\n\\left[\n\\begin{matrix}\n0 \\\\\n1 \\\\\n2 \\\\\n3 \\\\\n4\n\\end{matrix}\n\\right]\n\\begin{matrix}\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\longrightarrow\n\\end{matrix}\n\\left[\n\\begin{matrix}\n0 \\\\\n1 \\\\\n4 \\\\\n9 \\\\\n16\n\\end{matrix}\n\\right]\n$$\n\n</font>\n\n</div>\n\nObserva que el resultado del mapeo es un objeto de tipo `<class 'map'>` por lo que debemos convertirlo en un tipo que pueda ser desplegado para imprimir.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 3.**\n\n<font color=\"Black\">\nCrear un mapeo para convertir grados Fahrenheit a Celsius y viceversa:\n</font>\n\n</div>\n\n\n**Celsius $\\to$ Fahrenheit**\n\n**NOTA**. Solo se puede usar el mapeo una vez, si vuelves a ejecutar la celda anterior el resultado del mapeo estará vacío. Para volverlo a generar debes ejecutar la celda donde se construye el mapeo.\n\nLo anterior se puede realiza en una sola línea: crear el mapeo, convertir a lista e imprimir\n\n**Fahrenheit $\\to$ Celsius**\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 4.**\n\n<font color=\"Black\">\nCrear un mapeo para sumar los elementos de tres listas que contienen números enteros.\n    \n</font>\n</div>\n\n**NOTA**. La función `map()` se puede aplicar a más de un conjunto iterable, siempre y cuando los iterables tengan la misma longitud y la función que se aplique tenga los parámetros correspondientes.\n\n# Filtrado.\n\n- Filtrar es un procedimiento para seleccionar cosas de un conjunto o para impedir su paso libremente.\n\n- En matemáticas, un filtro es un subconjunto especial de un conjunto parcialmente ordenado.\n\n$$\n\\texttt{filter} \n$$\n$$\n\\left[\n\\begin{matrix}\ns_1 \\\\ s_2 \\\\ s_3 \\\\ s_4 \\\\ s_{n-1} \n\\end{matrix}\n\\right]\n\\begin{matrix}\n\\\\ \\xrightarrow{\\texttt{True}} \\\\  \\\\ \\xrightarrow{\\texttt{True}}  \\\\ \\xrightarrow{\\texttt{True}}   \n\\end{matrix}\n\\left[\n\\begin{matrix}\n- \\\\ f_1 \\\\ - \\\\ f_2 \\\\ f_{m-1} \n\\end{matrix}\n\\right]\n$$\n\n## `filter`.\nEn Python existe la función `filter(function, sequence)` cuyo primer parámetro es una función la cual se va a aplicar a una secuencia, la cual es el segundo parámetro. La función debe regresar un objeto de tipo Booleano: `True` o `False`. El resultado será una nueva secuencia con los elementos obtenidos de aplicar la función a cada elemento de la secuencia de entrada.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 5.**\n\n<font color=\"Black\">\n    \nUsando la función `filter()`, encontrar los números pares en una lista. \n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 6.**\n\n<font color=\"Black\">\n    \nEncontrar los números pares en una lista que contiene elementos de muchos tipos.\n</font>\n</div>\n\n**Paso 1.** Creamos la lista.\n\n**Paso 2.** Escribimos una función que verifique si una entrada es de tipo `int`.\n\nUna forma alternativa, más Pythonica,  de construir la función `esEntero()` es la siguiente:\n\n```python\ndef esEntero(i):\n    return True if isinstance(i, int) else False\n```\n\n**Paso 3.** Usamos la función `esPar()` para encontrar los pares de la lista.\n\nObserva que se aplicó dos veces la función `filter()`, la primera para determinar si el elemento de la lista es entero usando la función `esEntero()`, la segunda para determinar si el número es par.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 7.**\n\n<font color=\"Black\">\n    \nEncontrar los números primos en el conjunto $\\{2, \\dots, 50\\}$.\n</font>\n</div>\n\n# Reducción.\n\n- **Reducción** : Disminuir *algo* en tamaño, cantidad, grado, importancia, .. <br>\n\n- La operación de reducción es útil en muchos ámbitos, el objetivo es reducir un conjunto de objetos en un objeto más simple. <br>\n\nUna reducción se hace como sigue:\n\nDada la función $f()$ y la secuencia $[s_1, s_2, s_3, s_4]$ se tiene que\n\n$$\n[\\underbrace{\\underbrace{\\underbrace{s_1, s_2}_{a = f(s_1,s_2)}, s_3}_{b = f(a,s_3)}, s_4}_{c = f(b,s_4)}] \\qquad \\Longrightarrow \\qquad \\underbrace{f(\\underbrace{f(\\underbrace{f(s_1,s_2)}_{a}, s_3)}_{b}, s_4)}_{c}\n$$\n\n\n\n## `filter`.\nEn Python existe la función `reduce(function, sequence)` cuyo primer parámetro es una función la cual se va a aplicar a una secuencia, la cual es el segundo parámetro. La función debe regresar un objeto que es el resultado de la reducción.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 8.**\n\n<font color=\"Black\">\n    \nCalcular la siguiente serie:\n\n$1 + 2 + \\dots + n = \\sum\\limits_{i=1}^{n} i = \\dfrac{n(n+1)}{2}$\n\nSi $n = 4$ entonces 1+2+3+4 = 10\n\n</font></div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 9.**\n\n<font color=\"Black\">\n    \nCalcular la siguiente serie:\n\n$1 + \\dfrac{1}{2} + \\dots + \\dfrac{1}{n} = \\sum\\limits_{i=1}^{n} \\dfrac{1}{i} = $\n</font></div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 10.**\n\n<font color=\"Black\">\n    \nCalcular el máximo de una lista de números.\n</font></div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 11.**\n\n<font color=\"Black\">\n    \nCalcular el factorial de un número.\n</font></div>\n\n\n# Más ejemplos Pythonicos.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 12.**\n\n<font color=\"Black\">\n    \nConvertir grados Fahrenheit a Celsius y viceversa combinando `map()` con `lambda`.\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 13.**\n\n<font color=\"Black\">\n    \nSumar tres arreglos combinando `map()` con `lambda`.\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 14.**\n\n<font color=\"Black\">\n    \nEncontrar todos los números pares de una lista combinando `filter()` con `lambda`.\n\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 15.**\n\n<font color=\"Black\">\n    \nEncontrar todos los números primos en el conjunto $\\{2, \\dots, 50\\}$ combinando combinando `filter()` con `lambda`.\n\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 16.**\n\n<font color=\"Black\">\n    \nContar el número de caractéres de un texto, combinando `reduce()`, `map( )` y `lambda`.\n\n</font>\n</div>\n\nLo anterior se puede realizar si construir una función que cuenta los caracteres de una lista de cadenas:\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 17.**\n\n<font color=\"Black\">\nLa siguiente función es impura porque modifica la `lista`:\n\n```python\ndef cuadradosImpuros(lista):\n    for i, v in enumerate(lista):\n        lista[i] = v ** 2\n    return lista\n\nnumeros_originales = list(range(5))\nprint(numeros_originales)\nprint(cuadradosImpuros(numeros_originales))\nprint(numeros_originales)\n\n```\nLa salida del código anterior es el siguiente:\n\n```python\n[0, 1, 2, 3, 4]\n[0, 1, 4, 9, 16]\n[0, 1, 4, 9, 16]\n```\n\nEscribe una versión pura de la función `cuadradosImpuros(lista)` usando `map()` y `lambda`.\n\n</font>\n</div>\n\nUna manera alternativa es la siguiente:\n","srcMarkdownNoYaml":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n# Iterables\n\n- En Python existen objetos que contienen secuencias de otros objetos (listas, tuplas, diccionarios, etc).\n- Estos objetos se pueden recorrer usando ciclos <font color=#009500>**for ... in ...**</font> . <br>\n- A estos objetos se les conoce también como **iterables** (objetos iterables, secuencias iterables, contenedores iterables, conjunto iterable, entre otros).\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\">\n    \nCrear una cadena, una lista, una tupla, un diccionario, un conjunto y leer un archivo; posteriormente recorrer cada uno de estos iterables usando un ciclo `for`:\n\n</font>\n\n</div>\n\nObserva el caso del diccionario y del conjunto:\n* Diccionario: cuando hay claves repetidas, se sustituye el último valor que toma la clave (`'0':9`).\n* Conjunto: los elementos se ordenan, y no se admiten elementos repetidos.\n\n# Mapeo.\n\nEn análisis matemático, un *Mapeo* es una regla que asigna a cada elemento de un primer conjunto, un único elemento de un segundo conjunto:\n\n$$\n\\texttt{map} \n$$\n$$\n\\left[\n\\begin{matrix}\ns_1 \\\\\ns_2 \\\\\n\\vdots \\\\\ns_{n-1}\n\\end{matrix}\n\\right]\n\\begin{matrix}\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\vdots \\\\\n\\longrightarrow\n\\end{matrix}\n\\left[\n\\begin{matrix}\nt_1 \\\\\nt_2 \\\\\n\\vdots \\\\\nt_{n-1}\n\\end{matrix}\n\\right]\n$$\n\n## `map`\nEn Python existe la función `map(function, sequence)` cuyo primer parámetro es una función la cual se va a aplicar a una secuencia, la cual es el segundo parámetro. El resultado será una nueva secuencia con los elementos obtenidos de aplicar la función a cada elemento de la secuencia de entrada.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 2.**\n\n<font color=\"Black\">\n\nCrear el siguiente mapeo con una lista, una tupla, un conjunto\n$$\nf(x) = x^2 \n$$\n$$\n\\left[\n\\begin{matrix}\n0 \\\\\n1 \\\\\n2 \\\\\n3 \\\\\n4\n\\end{matrix}\n\\right]\n\\begin{matrix}\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\longrightarrow \\\\\n\\longrightarrow\n\\end{matrix}\n\\left[\n\\begin{matrix}\n0 \\\\\n1 \\\\\n4 \\\\\n9 \\\\\n16\n\\end{matrix}\n\\right]\n$$\n\n</font>\n\n</div>\n\nObserva que el resultado del mapeo es un objeto de tipo `<class 'map'>` por lo que debemos convertirlo en un tipo que pueda ser desplegado para imprimir.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 3.**\n\n<font color=\"Black\">\nCrear un mapeo para convertir grados Fahrenheit a Celsius y viceversa:\n</font>\n\n</div>\n\n\n**Celsius $\\to$ Fahrenheit**\n\n**NOTA**. Solo se puede usar el mapeo una vez, si vuelves a ejecutar la celda anterior el resultado del mapeo estará vacío. Para volverlo a generar debes ejecutar la celda donde se construye el mapeo.\n\nLo anterior se puede realiza en una sola línea: crear el mapeo, convertir a lista e imprimir\n\n**Fahrenheit $\\to$ Celsius**\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 4.**\n\n<font color=\"Black\">\nCrear un mapeo para sumar los elementos de tres listas que contienen números enteros.\n    \n</font>\n</div>\n\n**NOTA**. La función `map()` se puede aplicar a más de un conjunto iterable, siempre y cuando los iterables tengan la misma longitud y la función que se aplique tenga los parámetros correspondientes.\n\n# Filtrado.\n\n- Filtrar es un procedimiento para seleccionar cosas de un conjunto o para impedir su paso libremente.\n\n- En matemáticas, un filtro es un subconjunto especial de un conjunto parcialmente ordenado.\n\n$$\n\\texttt{filter} \n$$\n$$\n\\left[\n\\begin{matrix}\ns_1 \\\\ s_2 \\\\ s_3 \\\\ s_4 \\\\ s_{n-1} \n\\end{matrix}\n\\right]\n\\begin{matrix}\n\\\\ \\xrightarrow{\\texttt{True}} \\\\  \\\\ \\xrightarrow{\\texttt{True}}  \\\\ \\xrightarrow{\\texttt{True}}   \n\\end{matrix}\n\\left[\n\\begin{matrix}\n- \\\\ f_1 \\\\ - \\\\ f_2 \\\\ f_{m-1} \n\\end{matrix}\n\\right]\n$$\n\n## `filter`.\nEn Python existe la función `filter(function, sequence)` cuyo primer parámetro es una función la cual se va a aplicar a una secuencia, la cual es el segundo parámetro. La función debe regresar un objeto de tipo Booleano: `True` o `False`. El resultado será una nueva secuencia con los elementos obtenidos de aplicar la función a cada elemento de la secuencia de entrada.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 5.**\n\n<font color=\"Black\">\n    \nUsando la función `filter()`, encontrar los números pares en una lista. \n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 6.**\n\n<font color=\"Black\">\n    \nEncontrar los números pares en una lista que contiene elementos de muchos tipos.\n</font>\n</div>\n\n**Paso 1.** Creamos la lista.\n\n**Paso 2.** Escribimos una función que verifique si una entrada es de tipo `int`.\n\nUna forma alternativa, más Pythonica,  de construir la función `esEntero()` es la siguiente:\n\n```python\ndef esEntero(i):\n    return True if isinstance(i, int) else False\n```\n\n**Paso 3.** Usamos la función `esPar()` para encontrar los pares de la lista.\n\nObserva que se aplicó dos veces la función `filter()`, la primera para determinar si el elemento de la lista es entero usando la función `esEntero()`, la segunda para determinar si el número es par.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 7.**\n\n<font color=\"Black\">\n    \nEncontrar los números primos en el conjunto $\\{2, \\dots, 50\\}$.\n</font>\n</div>\n\n# Reducción.\n\n- **Reducción** : Disminuir *algo* en tamaño, cantidad, grado, importancia, .. <br>\n\n- La operación de reducción es útil en muchos ámbitos, el objetivo es reducir un conjunto de objetos en un objeto más simple. <br>\n\nUna reducción se hace como sigue:\n\nDada la función $f()$ y la secuencia $[s_1, s_2, s_3, s_4]$ se tiene que\n\n$$\n[\\underbrace{\\underbrace{\\underbrace{s_1, s_2}_{a = f(s_1,s_2)}, s_3}_{b = f(a,s_3)}, s_4}_{c = f(b,s_4)}] \\qquad \\Longrightarrow \\qquad \\underbrace{f(\\underbrace{f(\\underbrace{f(s_1,s_2)}_{a}, s_3)}_{b}, s_4)}_{c}\n$$\n\n\n\n## `filter`.\nEn Python existe la función `reduce(function, sequence)` cuyo primer parámetro es una función la cual se va a aplicar a una secuencia, la cual es el segundo parámetro. La función debe regresar un objeto que es el resultado de la reducción.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 8.**\n\n<font color=\"Black\">\n    \nCalcular la siguiente serie:\n\n$1 + 2 + \\dots + n = \\sum\\limits_{i=1}^{n} i = \\dfrac{n(n+1)}{2}$\n\nSi $n = 4$ entonces 1+2+3+4 = 10\n\n</font></div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 9.**\n\n<font color=\"Black\">\n    \nCalcular la siguiente serie:\n\n$1 + \\dfrac{1}{2} + \\dots + \\dfrac{1}{n} = \\sum\\limits_{i=1}^{n} \\dfrac{1}{i} = $\n</font></div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 10.**\n\n<font color=\"Black\">\n    \nCalcular el máximo de una lista de números.\n</font></div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 11.**\n\n<font color=\"Black\">\n    \nCalcular el factorial de un número.\n</font></div>\n\n\n# Más ejemplos Pythonicos.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 12.**\n\n<font color=\"Black\">\n    \nConvertir grados Fahrenheit a Celsius y viceversa combinando `map()` con `lambda`.\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 13.**\n\n<font color=\"Black\">\n    \nSumar tres arreglos combinando `map()` con `lambda`.\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 14.**\n\n<font color=\"Black\">\n    \nEncontrar todos los números pares de una lista combinando `filter()` con `lambda`.\n\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 15.**\n\n<font color=\"Black\">\n    \nEncontrar todos los números primos en el conjunto $\\{2, \\dots, 50\\}$ combinando combinando `filter()` con `lambda`.\n\n</font>\n</div>\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 16.**\n\n<font color=\"Black\">\n    \nContar el número de caractéres de un texto, combinando `reduce()`, `map( )` y `lambda`.\n\n</font>\n</div>\n\nLo anterior se puede realizar si construir una función que cuenta los caracteres de una lista de cadenas:\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 17.**\n\n<font color=\"Black\">\nLa siguiente función es impura porque modifica la `lista`:\n\n```python\ndef cuadradosImpuros(lista):\n    for i, v in enumerate(lista):\n        lista[i] = v ** 2\n    return lista\n\nnumeros_originales = list(range(5))\nprint(numeros_originales)\nprint(cuadradosImpuros(numeros_originales))\nprint(numeros_originales)\n\n```\nLa salida del código anterior es el siguiente:\n\n```python\n[0, 1, 2, 3, 4]\n[0, 1, 4, 9, 16]\n[0, 1, 4, 9, 16]\n```\n\nEscribe una versión pura de la función `cuadradosImpuros(lista)` usando `map()` y `lambda`.\n\n</font>\n</div>\n\nUna manera alternativa es la siguiente:\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"T12_IterablesMapFilterReduce.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"Iterables, Mapeo, Filtros y Reducciones."},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"T12_IterablesMapFilterReduce.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"documentclass":"scrreprt","title":"Iterables, Mapeo, Filtros y Reducciones."},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}