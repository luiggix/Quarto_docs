{"title":"Control de flujo.","markdown":{"yaml":{"title":"Control de flujo."},"headingText":"`while`","containsRefs":false,"markdown":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\nEn Python existen declaraciones que permiten controlar el flujo de un programa para realizar acciones complejas. Entre estas declaraciones tenemos las siguientes:\n\n* `while`\n* `for`\n* `if`\n* `match`\n\nJunto con estas declaraciones generalmente se utilizan las siguientes operaciones lógicas cuyo resultado puede ser `True` o `False`:\n\n| Python | Significado |\n|---|---|\n| `a == b` | ¿son iguales `a` y `b`? | \n| `a != b` | ¿son diferentes `a` y `b`? |\n| `a < b` |  ¿`a` es menor que `b`?:\n| `a <= b` | ¿`a` es menor o igual que `b`? |\n| `a > b` | ¿`a` es mayor que `b`? | \n| `a >= b` | ¿`a` es mayor o igual que `b`? |\n| **`not`** `A` | El inverso de la expresión `A` |\n| `A` **`and`** `B` | ¿La expresión `A` y la expresión `B` son verdaderas? |\n| `A` **`or`** `B`| ¿La expresión `A` o la expresión `B` es verdadera?:\n\n\n\nSe utiliza para repetir un conjunto de instrucciones mientras una expresión sea verdadera:\n\n```python\nwhile expresión:\n    código ...\n```\n\nPor ejemplo:\n\n* Como se observa, el código después de `while` tiene una sangría (*indentation*): las líneas de código están recorridas hacia la derecha. \n* Este espacio en blanco debe ser al menos de uno, pero pueden ser más.\n* Por omisión, en JupyterLab (y algunos otros editores, se usan 4 espacios en blanco para cada línea de código dentro del bloque.\n* El número de espacios en blanco se debe mantener durante todo el bloque de código.\n* Cuando termina el sangrado, es decir las líneas de código ya no tienen ningún espacio en blanco al inicio, se cierra el bloque de código, en este caso el `while`.\n* El uso de una sangría para organizar los bloques de código lo hace Python para que el código sea más entendible.\n    \n* **Ejemplos válidos**:\n\n```python\nwhile a < 5: \n print(a)\n a += 1\n```\n\n```python\nwhile a < 5: \n        print(a)\n        a += 1\n```\n\n* **Ejemplos NO válidos**\n\n```python\nwhile a < 5: \n print(a)\n   a += 1\n```\n\n```python\nwhile a < 5: \nprint(a)\na += 1\n``` \n\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\">\nLos número de Fibonacci, denotados con $F_n$ forman una secuencia tal que cada número es la suma de dos números precedentes e inicia con el 0 y el 1. Matemáticamente se escribe como: \n\n$$\n\\begin{eqnarray}\nF_0 & = & 0 \\\\\nF_1 & = & 1 \\\\\nF_n & = & F_{n − 1} + F_{n − 2} \\;\\;\\; \\text{para} \\; n > 1.\n\\end{eqnarray}\n$$\nLa secuencia es entonces: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , $\\ldots$\n\nVamos a calcular esta secuencia usando la instrucción `while`:\n\n</font>\n\n</div>\n\n\n\n\n# `if`, `elif`, `else`\n\nEsta declaración permite ejecutar un código dependiendo del resultado de una o varias expresiones lógicas. La estructura es como sigue:\n\n```python\nif expresion1:\n    codigo1 ...\nelif expresion2:\n    codigo2 ...\nelif expresion3:\n    codigo3 ...\nelse:\n    codigo4\n```\n\nSi la `expresion1` es verdadera, entonces se ejecuta el `codigo1`, en otro caso se evalúan las siguientes expresiones y dependiendo de cuál es verdadera se ejecuta el código correspondiente. Cuando ninguna de las expresiones es verdadera, entonces se ejecuta el código de la sección `else`, es decir el `codigo4`.\n\nObserva que se siguen las mismas reglas de sangrado que en el `while`. \n\nVeamos un ejemplo:\n\nLas expresiones pueden ser más complejas:\n\n# Operador ternario\n\nEste operador permite evaluar una expresión lógica y generar un valor para un resultado `True` y otro diferente para un resultado `False`; todo esto se logra en una sola línea de código como sigue:\n\n```python\nresultado = valor1 if expresion else valor2\n```\n\nPor ejemplo:\n\n# `for`\n\nPermite iterar sobre el contenido de cualquier secuencia (cadena, lista, tupla, conjunto, diccionario, archivo, ...). La forma de esta declaración es como sigue:\n\n```python\nfor i in secuencia:\n    codigo\n```\n\nLas reglas de sangrado se siguen en esta declaración.\n\nPor ejemplo:\n\n## Función `zip`\n\nLa función `zip(s1, s2, ...)` permite combinar dos o más secuencias en una sola; genera tuplas con los elementos de: las secuencias y va iterando sobre ellas. \n\nPor ejemplo\n\n## Conversión de `zip` a `list`, `tuple`, `set`, `dict`\n\nEstrictamente `zip` es una clase que define un tipo dentro de Python, por lo que es posible convertir del tipo `zip` a alguna otra secuencia básica de datos de Python.\n\n## Función `enumerate`\n\nPermite enumerar los elementos de una secuencia. Genera tuplas con el número del elemento y el elemento de la secuencia.\n\nPor ejemplo:\n\nLo anterior permite usar el indexado para acceder a los elementos de una secuencia:\n\n## Conversión de `enumerate` a `list`, `tuple`, `set`, `dict`\nEstrictamente `enumerate` es una clase que define un tipo dentro de Python, por lo que es posible convertir del tipo `enumerate` a alguna otra secuencia básica de datos de Python:\n\n## Funcion range\n\nEsta función genera una secuencia iterable con un inicio, un final y un salta:\n\n```python\nrange(start, stop, step)\n```\n\nLa secuencia irá desde `start` hasta `stop-1` en pasos de `step`. Por ejemplo:\n\nUsando `range()` se puede acceder a una seccuencia mediante el indexado:\n\n## Conversión de `range` a `list`, `tuple`, `set`\nEstrictamente `range` es una clase que define un tipo dentro de Python, por lo que es posible convertir del tipo `range` a alguna otra secuencia básica de datos de Python:\n\n## break, continue, else, pass\n\nEstas son palabras clave que se pueden usar en ciclos `while` o `for`:\n* `break`: terminar el ciclo más interno.\n* `continue`: saltarse a la siguiente iteración sin terminar de ejecutar el código que sigue.\n* `else`: **NO** se ejecuta el código de esta cláusula si el ciclo es finalizado por el `break`. \n* `pass`: no hacer nada y continuar.\n\nVeamos algunos ejemplos:\n\n### Más ejemplos.\n\n# `match` (desde la versión 3.10)\n\nSimilar al switch de lenguajes como C, C++, Java.\n\n\n\nPara más detalles véase [match Statements](https://docs.python.org/3/tutorial/controlflow.html#match-statements).\n","srcMarkdownNoYaml":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\nEn Python existen declaraciones que permiten controlar el flujo de un programa para realizar acciones complejas. Entre estas declaraciones tenemos las siguientes:\n\n* `while`\n* `for`\n* `if`\n* `match`\n\nJunto con estas declaraciones generalmente se utilizan las siguientes operaciones lógicas cuyo resultado puede ser `True` o `False`:\n\n| Python | Significado |\n|---|---|\n| `a == b` | ¿son iguales `a` y `b`? | \n| `a != b` | ¿son diferentes `a` y `b`? |\n| `a < b` |  ¿`a` es menor que `b`?:\n| `a <= b` | ¿`a` es menor o igual que `b`? |\n| `a > b` | ¿`a` es mayor que `b`? | \n| `a >= b` | ¿`a` es mayor o igual que `b`? |\n| **`not`** `A` | El inverso de la expresión `A` |\n| `A` **`and`** `B` | ¿La expresión `A` y la expresión `B` son verdaderas? |\n| `A` **`or`** `B`| ¿La expresión `A` o la expresión `B` es verdadera?:\n\n\n# `while`\n\nSe utiliza para repetir un conjunto de instrucciones mientras una expresión sea verdadera:\n\n```python\nwhile expresión:\n    código ...\n```\n\nPor ejemplo:\n\n* Como se observa, el código después de `while` tiene una sangría (*indentation*): las líneas de código están recorridas hacia la derecha. \n* Este espacio en blanco debe ser al menos de uno, pero pueden ser más.\n* Por omisión, en JupyterLab (y algunos otros editores, se usan 4 espacios en blanco para cada línea de código dentro del bloque.\n* El número de espacios en blanco se debe mantener durante todo el bloque de código.\n* Cuando termina el sangrado, es decir las líneas de código ya no tienen ningún espacio en blanco al inicio, se cierra el bloque de código, en este caso el `while`.\n* El uso de una sangría para organizar los bloques de código lo hace Python para que el código sea más entendible.\n    \n* **Ejemplos válidos**:\n\n```python\nwhile a < 5: \n print(a)\n a += 1\n```\n\n```python\nwhile a < 5: \n        print(a)\n        a += 1\n```\n\n* **Ejemplos NO válidos**\n\n```python\nwhile a < 5: \n print(a)\n   a += 1\n```\n\n```python\nwhile a < 5: \nprint(a)\na += 1\n``` \n\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\">\nLos número de Fibonacci, denotados con $F_n$ forman una secuencia tal que cada número es la suma de dos números precedentes e inicia con el 0 y el 1. Matemáticamente se escribe como: \n\n$$\n\\begin{eqnarray}\nF_0 & = & 0 \\\\\nF_1 & = & 1 \\\\\nF_n & = & F_{n − 1} + F_{n − 2} \\;\\;\\; \\text{para} \\; n > 1.\n\\end{eqnarray}\n$$\nLa secuencia es entonces: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , $\\ldots$\n\nVamos a calcular esta secuencia usando la instrucción `while`:\n\n</font>\n\n</div>\n\n\n\n\n# `if`, `elif`, `else`\n\nEsta declaración permite ejecutar un código dependiendo del resultado de una o varias expresiones lógicas. La estructura es como sigue:\n\n```python\nif expresion1:\n    codigo1 ...\nelif expresion2:\n    codigo2 ...\nelif expresion3:\n    codigo3 ...\nelse:\n    codigo4\n```\n\nSi la `expresion1` es verdadera, entonces se ejecuta el `codigo1`, en otro caso se evalúan las siguientes expresiones y dependiendo de cuál es verdadera se ejecuta el código correspondiente. Cuando ninguna de las expresiones es verdadera, entonces se ejecuta el código de la sección `else`, es decir el `codigo4`.\n\nObserva que se siguen las mismas reglas de sangrado que en el `while`. \n\nVeamos un ejemplo:\n\nLas expresiones pueden ser más complejas:\n\n# Operador ternario\n\nEste operador permite evaluar una expresión lógica y generar un valor para un resultado `True` y otro diferente para un resultado `False`; todo esto se logra en una sola línea de código como sigue:\n\n```python\nresultado = valor1 if expresion else valor2\n```\n\nPor ejemplo:\n\n# `for`\n\nPermite iterar sobre el contenido de cualquier secuencia (cadena, lista, tupla, conjunto, diccionario, archivo, ...). La forma de esta declaración es como sigue:\n\n```python\nfor i in secuencia:\n    codigo\n```\n\nLas reglas de sangrado se siguen en esta declaración.\n\nPor ejemplo:\n\n## Función `zip`\n\nLa función `zip(s1, s2, ...)` permite combinar dos o más secuencias en una sola; genera tuplas con los elementos de: las secuencias y va iterando sobre ellas. \n\nPor ejemplo\n\n## Conversión de `zip` a `list`, `tuple`, `set`, `dict`\n\nEstrictamente `zip` es una clase que define un tipo dentro de Python, por lo que es posible convertir del tipo `zip` a alguna otra secuencia básica de datos de Python.\n\n## Función `enumerate`\n\nPermite enumerar los elementos de una secuencia. Genera tuplas con el número del elemento y el elemento de la secuencia.\n\nPor ejemplo:\n\nLo anterior permite usar el indexado para acceder a los elementos de una secuencia:\n\n## Conversión de `enumerate` a `list`, `tuple`, `set`, `dict`\nEstrictamente `enumerate` es una clase que define un tipo dentro de Python, por lo que es posible convertir del tipo `enumerate` a alguna otra secuencia básica de datos de Python:\n\n## Funcion range\n\nEsta función genera una secuencia iterable con un inicio, un final y un salta:\n\n```python\nrange(start, stop, step)\n```\n\nLa secuencia irá desde `start` hasta `stop-1` en pasos de `step`. Por ejemplo:\n\nUsando `range()` se puede acceder a una seccuencia mediante el indexado:\n\n## Conversión de `range` a `list`, `tuple`, `set`\nEstrictamente `range` es una clase que define un tipo dentro de Python, por lo que es posible convertir del tipo `range` a alguna otra secuencia básica de datos de Python:\n\n## break, continue, else, pass\n\nEstas son palabras clave que se pueden usar en ciclos `while` o `for`:\n* `break`: terminar el ciclo más interno.\n* `continue`: saltarse a la siguiente iteración sin terminar de ejecutar el código que sigue.\n* `else`: **NO** se ejecuta el código de esta cláusula si el ciclo es finalizado por el `break`. \n* `pass`: no hacer nada y continuar.\n\nVeamos algunos ejemplos:\n\n### Más ejemplos.\n\n# `match` (desde la versión 3.10)\n\nSimilar al switch de lenguajes como C, C++, Java.\n\n\n\nPara más detalles véase [match Statements](https://docs.python.org/3/tutorial/controlflow.html#match-statements).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"T06_Control_de_flujo.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"Control de flujo."},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"T06_Control_de_flujo.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"documentclass":"scrreprt","title":"Control de flujo."},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}