{"title":"Estructura de datos.","markdown":{"yaml":{"title":"Estructura de datos."},"headingText":"Introducción","containsRefs":false,"markdown":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n\nHay cuatro tipos de estructuras de datos, también conocidas como *colecciones*. La siguiente tabla resume estos cuatro tipos:\n\n|Tipo|Ordenada|Inmutable|Indexable|Duplicidad|\n|-:|:-:|:-:|:-:|:-:|\n|List |SI|NO|SI|SI|\n|Tuple|SI|SI|SI|SI|\n|Sets |NO|NO|NO|NO|\n|Dict |NO|NO|SI|NO|\n\n\n\nCuando se selecciona un tipo de colección, es importante conocer sus propiedades para incrementar la eficiencia y/o la seguridad de los datos.\n\n# Listas\n\n* Consisten en una secuencia **ordenada** y **mutable** de elementos. \n    - Ordenadas significa que cada elemento dentro de la lista está indexado y mantiene su orden definido en su creación.\n    - Mutable significa que los elementos de la lista se pueden modificar, y además que se pueden agregar o eliminar elementos.\n* Las listas pueden tener elementos **duplicados**, es decir, **elementos del mismo tipo y con el mismo contenido**.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\">\n    \nCreamos 4 listas:\n    \n* `gatos` : Razas de gatos.\n* `origen` : Origen de cada raza de gatos.\n* `pelo_largo`: Si tienen pelo largo o no.\n* `pelo_corto`: Si tienen pelo corto o no.\n* `peso_minimo`: El peso mínimo que pueden tener.\n* `peso_maximo`: El peso máximo que pueden tener.\n\n</font>\n\n</div>\n\n**Observaciones**:\n* Cada lista contiene 4 elementos. \n* Los elementos de cada lista son del mismo tipo. \n* Los elementos son cadenas, tipos lógicos y flotantes.\n\nSe puede obtaner el tipo de las listas como sigue:\n\n## Indexado\n\nSe puede acceder a cada elemento de las listas de manera similar a como se hace con las cadenas, veáse la notebook ...\n\nPor ejemplo:\n\nPara conocer el tipo de objeto de uno de los elementos podemos hacer lo siguiente:\n\n## Operaciones sobre las listas\n\nExisten muchas operaciones que se pueden realizar sobre las listas. A continuación se muestran unos ejemplos\n\n## Métodos de las listas (comportamiento)\n\nEn términos de Programación Orientada a Objetos, la clase `<class 'list'>` define una serie de métodos que se pueden aplicar sobre los objetos del tipo `list`. Veamos algunos ejemplos:\n\nObserva que solo se elimina el primer elemento 'Persa' que encuentra.\n\nUna descripción detallada de los métodos de la listas se puede ver en [More on Lists](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists).\n\n## Copiando listas\n\nUna lista es un objeto que contiene varios elementos. Para crear una copia de una lista, se debe generar un espacio de memoria en donde se copien todos los elementos de la lista original y asignar un nuevo nombre para esta nueva lista. Lo anterior no se puede hacer simplemente con el operador de asignación. Veamos un ejemplo:\n\nPodemos observar que al imprimir la lista mediante los nombres `gatos` y `gatitos` obtenemos el mismo resultado. Ahora, modifiquemos el primer elemento usando el nombre `gatitos`: \n\nObservamos que al imprimir la lista usando `gatos` y `gatitos` volvemos a obtener el mismo resultado. Lo anterior significa que el operador de asignación solamente creó un nuevo nombre para el mismo objeto en memoria, por lo que en realidad no hizo una copia de la lista. Lo anterior lo podemos verificar usando la función `id()` para ver la dirección en memoria del objeto:\n\n### Copiando con `[:]`\n\nCrear una nueva lista copiando todos los elementos podemos hacer lo siguiente:\n\nObserva que el identificador en memoria de cada lista es diferente.\n\n### Copiando con el método `copy()`\n\nLa clase `<class 'list'>` contiene un método llamado `copy()` que efectivamente realiza una copia de la lista:\n\nObserva que el identificador en memoria de cada lista es diferente.\n\n### Copiando con el constructor\n\nLa función `list()` transforma un objeto *iterable* en una lista. La podemos usar para copiar una lista como sigue:\n\nObserva que el identificador en memoria de cada lista es diferente.\n\n**NOTA**. Lo que sucede en este último caso, es que se ejecuta el constructor de la clase `<class 'list'>`, el cual recibe un objeto iterable (lista, tupla, diccionario, entre otros), copia todos los elementos de ese iterable y los pone en una lista que se almacena en un espacio en memoria diferente al iterable original.\n\n### Copiando con la biblioteca `copy`\n\nObserva que el identificador en memoria de cada lista es diferente.\n\nMás información sobre el uso de esta biblioteca se puede ver en [Shallow and deep copy operations](https://docs.python.org/3/library/copy.html).\n\n## Listas mas complejas.\n\nLas listas pueden tener elementos de distintos tipos. Por ejemplo:\n\n# Tuplas\n\n* Consisten en una secuencia **ordenada** e **inmutable** de elementos. \n    - Ordenadas significa que cada elemento dentro de la tupla está indexado y mantiene su orden definido en su creación.\n    - Inmutable significa que los elementos de la tupla **NO se pueden modificar**, tampoco que se pueden agregar o eliminar elementos.\n* Las tuplas pueden tener elementos **duplicados**, es decir, **elementos del mismo tipo y con el mismo contenido**.\n\nVeamos algunos ejemplos:\n\nLa clase `<class 'tuple'>` solo contiene dos funciones:\n* `index(o)`, determina el índice dentro de la tupla del objeto `o`. \n* `count(o)`, determina el número de objetos iguales a `o` existen dentro de la tupla.\n\nSi deseamos una tupla de un solo elemento debemos realizar lo siguiente:\n\nLa siguiente expresión no construye una tupla, si no un entero:\n\n## Indexado.\n\nEl indexado de las tuplas es similar al de las listas.\n\n## Inmutabilidad\n\nLos elementos de las tuplas no se pueden modificar.\n\n## ¿Copiando tuplas?\n\nNo es posible crear una copia de una tupla en otra. Lo que se recomienda es transformar la tupla en otra estructura de datos compatible (por ejemplo `list` o `set`).\n\n# Conjuntos\n\n* Consisten en una secuencia **NO ordenada**, **modificable**, **NO indexable** y **NO** permite miembros duplicados.\n\nVeamos algunos ejemplos:\n\n## Funciones y operaciones sobre conjuntos\n\nObserva que el identificador no ha cambiado, solo se eliminaron todos los elementos.\n\n## Copiando conjuntos\n\n### Copiando con el método `copy()`\n\n### Copiando con la biblioteca `copy()`\n\n# Diccionarios \n- Diccionarios son colecciones que **NO** son ordenadas, son **modificables**, **indexables** y **NO** permiten miembros duplicados.\n- Las colecciones están compuesta por pares `clave:valor`.\n- Se accede a los valores mediante las claves en lugar de índices.\n\nVeamos algunos ejemplos:\n\n## Operaciones sobre diccionarios\n\nSe puede acceder a las claves y a los valores de manera independiente como sigue:\n\nObserva que cuando el elemento no existe, la expresión `dicc['fulano'] = 100` agrega el par `'fulano': 100` al diccionario.\n\nPodemos agregar un diccionario en otro:\n\nSi los elementos ya existen, solo se actualizan los valores:\n\n## Copiando diccionarios\n\n### Copiando con el método `copy()`\n\n### Copiando con la biblioteca `copy()`\n\n# Transformación entre colecciones\n\n### listas $\\to$ tuplas\n\n### listas $\\to$ conjuntos\n\nObserva que en esta transformación el conjunto elimina los elementos repetidos.\n\n### listas $\\to$ diccionarios\n\n### tuplas $\\to$ listas\n\n### tuplas $\\to$ conjuntos\n\n### tuplas $\\to$ diccionarios\n\n### conjunto $\\to$ lista y tupla\n\n### conjuntos $\\to$ diccionarios\n\n### diccionarios $\\to$ listas, tuplas y conjuntos\n\nConversión directa:\n\nConversión desde las claves:\n\nConversión desde las valores:\n","srcMarkdownNoYaml":"\n\n\n\n\n**Objetivo.**\n...\n\n**Funciones de Python**:\n...\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n# Introducción\n\nHay cuatro tipos de estructuras de datos, también conocidas como *colecciones*. La siguiente tabla resume estos cuatro tipos:\n\n|Tipo|Ordenada|Inmutable|Indexable|Duplicidad|\n|-:|:-:|:-:|:-:|:-:|\n|List |SI|NO|SI|SI|\n|Tuple|SI|SI|SI|SI|\n|Sets |NO|NO|NO|NO|\n|Dict |NO|NO|SI|NO|\n\n\n\nCuando se selecciona un tipo de colección, es importante conocer sus propiedades para incrementar la eficiencia y/o la seguridad de los datos.\n\n# Listas\n\n* Consisten en una secuencia **ordenada** y **mutable** de elementos. \n    - Ordenadas significa que cada elemento dentro de la lista está indexado y mantiene su orden definido en su creación.\n    - Mutable significa que los elementos de la lista se pueden modificar, y además que se pueden agregar o eliminar elementos.\n* Las listas pueden tener elementos **duplicados**, es decir, **elementos del mismo tipo y con el mismo contenido**.\n\n<div class=\"alert alert-info\">\n\n## **Ejemplo 1.**\n\n<font color=\"Black\">\n    \nCreamos 4 listas:\n    \n* `gatos` : Razas de gatos.\n* `origen` : Origen de cada raza de gatos.\n* `pelo_largo`: Si tienen pelo largo o no.\n* `pelo_corto`: Si tienen pelo corto o no.\n* `peso_minimo`: El peso mínimo que pueden tener.\n* `peso_maximo`: El peso máximo que pueden tener.\n\n</font>\n\n</div>\n\n**Observaciones**:\n* Cada lista contiene 4 elementos. \n* Los elementos de cada lista son del mismo tipo. \n* Los elementos son cadenas, tipos lógicos y flotantes.\n\nSe puede obtaner el tipo de las listas como sigue:\n\n## Indexado\n\nSe puede acceder a cada elemento de las listas de manera similar a como se hace con las cadenas, veáse la notebook ...\n\nPor ejemplo:\n\nPara conocer el tipo de objeto de uno de los elementos podemos hacer lo siguiente:\n\n## Operaciones sobre las listas\n\nExisten muchas operaciones que se pueden realizar sobre las listas. A continuación se muestran unos ejemplos\n\n## Métodos de las listas (comportamiento)\n\nEn términos de Programación Orientada a Objetos, la clase `<class 'list'>` define una serie de métodos que se pueden aplicar sobre los objetos del tipo `list`. Veamos algunos ejemplos:\n\nObserva que solo se elimina el primer elemento 'Persa' que encuentra.\n\nUna descripción detallada de los métodos de la listas se puede ver en [More on Lists](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists).\n\n## Copiando listas\n\nUna lista es un objeto que contiene varios elementos. Para crear una copia de una lista, se debe generar un espacio de memoria en donde se copien todos los elementos de la lista original y asignar un nuevo nombre para esta nueva lista. Lo anterior no se puede hacer simplemente con el operador de asignación. Veamos un ejemplo:\n\nPodemos observar que al imprimir la lista mediante los nombres `gatos` y `gatitos` obtenemos el mismo resultado. Ahora, modifiquemos el primer elemento usando el nombre `gatitos`: \n\nObservamos que al imprimir la lista usando `gatos` y `gatitos` volvemos a obtener el mismo resultado. Lo anterior significa que el operador de asignación solamente creó un nuevo nombre para el mismo objeto en memoria, por lo que en realidad no hizo una copia de la lista. Lo anterior lo podemos verificar usando la función `id()` para ver la dirección en memoria del objeto:\n\n### Copiando con `[:]`\n\nCrear una nueva lista copiando todos los elementos podemos hacer lo siguiente:\n\nObserva que el identificador en memoria de cada lista es diferente.\n\n### Copiando con el método `copy()`\n\nLa clase `<class 'list'>` contiene un método llamado `copy()` que efectivamente realiza una copia de la lista:\n\nObserva que el identificador en memoria de cada lista es diferente.\n\n### Copiando con el constructor\n\nLa función `list()` transforma un objeto *iterable* en una lista. La podemos usar para copiar una lista como sigue:\n\nObserva que el identificador en memoria de cada lista es diferente.\n\n**NOTA**. Lo que sucede en este último caso, es que se ejecuta el constructor de la clase `<class 'list'>`, el cual recibe un objeto iterable (lista, tupla, diccionario, entre otros), copia todos los elementos de ese iterable y los pone en una lista que se almacena en un espacio en memoria diferente al iterable original.\n\n### Copiando con la biblioteca `copy`\n\nObserva que el identificador en memoria de cada lista es diferente.\n\nMás información sobre el uso de esta biblioteca se puede ver en [Shallow and deep copy operations](https://docs.python.org/3/library/copy.html).\n\n## Listas mas complejas.\n\nLas listas pueden tener elementos de distintos tipos. Por ejemplo:\n\n# Tuplas\n\n* Consisten en una secuencia **ordenada** e **inmutable** de elementos. \n    - Ordenadas significa que cada elemento dentro de la tupla está indexado y mantiene su orden definido en su creación.\n    - Inmutable significa que los elementos de la tupla **NO se pueden modificar**, tampoco que se pueden agregar o eliminar elementos.\n* Las tuplas pueden tener elementos **duplicados**, es decir, **elementos del mismo tipo y con el mismo contenido**.\n\nVeamos algunos ejemplos:\n\nLa clase `<class 'tuple'>` solo contiene dos funciones:\n* `index(o)`, determina el índice dentro de la tupla del objeto `o`. \n* `count(o)`, determina el número de objetos iguales a `o` existen dentro de la tupla.\n\nSi deseamos una tupla de un solo elemento debemos realizar lo siguiente:\n\nLa siguiente expresión no construye una tupla, si no un entero:\n\n## Indexado.\n\nEl indexado de las tuplas es similar al de las listas.\n\n## Inmutabilidad\n\nLos elementos de las tuplas no se pueden modificar.\n\n## ¿Copiando tuplas?\n\nNo es posible crear una copia de una tupla en otra. Lo que se recomienda es transformar la tupla en otra estructura de datos compatible (por ejemplo `list` o `set`).\n\n# Conjuntos\n\n* Consisten en una secuencia **NO ordenada**, **modificable**, **NO indexable** y **NO** permite miembros duplicados.\n\nVeamos algunos ejemplos:\n\n## Funciones y operaciones sobre conjuntos\n\nObserva que el identificador no ha cambiado, solo se eliminaron todos los elementos.\n\n## Copiando conjuntos\n\n### Copiando con el método `copy()`\n\n### Copiando con la biblioteca `copy()`\n\n# Diccionarios \n- Diccionarios son colecciones que **NO** son ordenadas, son **modificables**, **indexables** y **NO** permiten miembros duplicados.\n- Las colecciones están compuesta por pares `clave:valor`.\n- Se accede a los valores mediante las claves en lugar de índices.\n\nVeamos algunos ejemplos:\n\n## Operaciones sobre diccionarios\n\nSe puede acceder a las claves y a los valores de manera independiente como sigue:\n\nObserva que cuando el elemento no existe, la expresión `dicc['fulano'] = 100` agrega el par `'fulano': 100` al diccionario.\n\nPodemos agregar un diccionario en otro:\n\nSi los elementos ya existen, solo se actualizan los valores:\n\n## Copiando diccionarios\n\n### Copiando con el método `copy()`\n\n### Copiando con la biblioteca `copy()`\n\n# Transformación entre colecciones\n\n### listas $\\to$ tuplas\n\n### listas $\\to$ conjuntos\n\nObserva que en esta transformación el conjunto elimina los elementos repetidos.\n\n### listas $\\to$ diccionarios\n\n### tuplas $\\to$ listas\n\n### tuplas $\\to$ conjuntos\n\n### tuplas $\\to$ diccionarios\n\n### conjunto $\\to$ lista y tupla\n\n### conjuntos $\\to$ diccionarios\n\n### diccionarios $\\to$ listas, tuplas y conjuntos\n\nConversión directa:\n\nConversión desde las claves:\n\nConversión desde las valores:\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"T05_Estructura_de_Datos.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"Estructura de datos."},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"T05_Estructura_de_Datos.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"documentclass":"scrreprt","title":"Estructura de datos."},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}