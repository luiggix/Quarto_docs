{"title":"Tipos de datos básicos y operadores.","markdown":{"yaml":{"title":"Tipos de datos básicos y operadores."},"headingText":"Tipos y operadores","containsRefs":false,"markdown":"\n\n\n\n\n**Objetivo.**\nExplicar el concepto de variable, etiqueta, objetos y como se usan mediante algunos ejemplos.\n\n**Funciones de Python**:\n- `print()`, `type()`, `id()`, `chr()`, `ord()`, `del()`\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n\nEn Python se tienen tres tipos de datos básicos principales:\n\n|Tipo|Ejemplo|\n|----|-------|\n|Númerico|13, 3.1416, 1+5j|\n| Cadena |\"Frida\", \"Diego\"|\n| Lógico | True, False|\n\n## Tipos númericos\nEn Python se tienen tres tipos de datos númericos:\n1. Enteros\n2. Reales\n3. Complejos\n\nA continuación se realiza una descripción de estos tipos numéricos. Más información se puede encontrar aquí: <a href=\"https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex\">Numeric types</a>.\n\n**1. Enteros**\n\nSon aquellos que carecen de parte decimal. Para definir un entero hacemos lo siguiente:\n\nCuando se ejecuta la celda anterior, se crea el objeto `13` cuyo nombre es `entero`. Podemos imprimir el valor de `entero` y su tipo como sigue:\n\nEs posible obtener más información del tipo `int` usando la biblioteca `sys`:\n\n**2. Reales**\n\nSon aquellos que tienen una parte decimal. Para definir un número real (flotante) se hace como sigue:\n\nCuando se ejecuta la celda anterior, se crea el objeto `3.141592` cuyo nombre es `pi`. Podemos imprimir el valor de `pi` y su tipo como sigue:\n\n**3. Complejos**\n\nSon aquellos que tienen una parte real y una parte imaginaria, y ambas partes son números reales. Para definir un número complejo se hace como sigue:\n\nCuando se ejecuta la celda anterior, se crea el objeto `12 + 5j` cuyo nombre es `complejo`. En este caso, el contenido de `complejo` tiene dos partes: la real y la imaginaria. Podemos imprimir el valor de `complejo` y su tipo como sigue:\n\n**Nota**: observa que hemos aplicado el método `conjugate()` al objeto `complejo`, esto es posible debido a que existe la clase `<class 'complex'>` en Python, y en ella se definen atributos y métodos para los objetos de esta clase. Más acerca de programación orientada a objetos la puedes ver en esta sección XXX.\n\n### Operadores aritméticos\n\nPara los tipos numéricos descritos antes, existen operaciones aritméticas que se pueden aplicar sobre ellos. Veamos:\n\n### Precedencia de operadores.\n\nLa aplicación de los operadores tiene cierta precedencia que está definida en cada implementación del lenguaje de programación. La siguiente tabla muestra el orden en que se aplicarán los operadores en una expresión. \n\n| Nivel | Categoría | Operadores|\n|---|---|---|\n| 7 | exponenciación | `**` |\n| 6 | multiplicación | `*`,`/`,`//`,`%` |\n| 5 | adición | `+`,`-`|\n| 4 | relacional | `==`,`!=`,`<=`,`>=`,`>`,`<`|\n| 3 | logicos | `not` |\n| 2 | logicos | `and` |\n| 1 | logicos | `or` |\n\nComo se puede ver, siempre se aplican primero los operadores aritméticos (niveles 7,6, y 5), luego los relacionales (nivel 4) y finalmente los lógicos (3, 2 y 1).\n\nMás acerca de este tema se puede ver aquí: <a href=\"https://docs.python.org/3/reference/expressions.html#operator-summary\">Operator precedence</a>.\n\nA continuación se muestran ejemplos de operaciones aritméticas en donde se resalta est precedencia:\n\n### Operaciones entre tipos diferentes\n\nEs posible combinar operaciones entre tipos de números diferentes. Lo que Python hará es promover cada número al tipo más sofisticado, siendo el orden de sofisticación, de menos a más, como sigue: `int`, `float`, `complex`.\n\n### Operadores de asignación\n\nExisten varios operadores para realizar asignaciones: `=`, `+=`, `-=`, `*=`, `/=`, `**=`, `%=`. La forma de uso de estos operadores se muestra en los siguientes ejemplos:\n\n## Tipos lógicos\n\nEs un tipo utilizado para realizar operaciones lógicas y puede tomar dos valores: `True` o `False`.\n\n### Operadores relacionales\n\nCuando se aplica un operador relacional a dos expresiones, se realiza una comparación entre dichas expresiones y se obtiene como resultado un tipo lógico. `True` o `False`.\n\nLos operadores relacionales que se pueden usar son: `==`,`!=`,`<=`,`>=`,`>`,`<`. A continuación se muestran algunos ejemplos:\n\n### Operaciones lógicas.\n\nLos operadores lógicos que se pueden usar son: `not`, `and` y `or`. Veamos algunos ejemplos\n\nDebido a la precedencia de operadores, no son necesarios los paréntesis en la operaciones relacionales de la expresión anterior (véase tabla ...):\n\nAunque a veces el uso de paréntesis hace la lectura del código más clara: \n\n#### Comparación entre números flotantes.\nLa comparación entre números de tipo flotante debe reaizarse con cuidado, veamos el siguiente ejemplo:\n\nEl cálculo a mano de `(0.4 -0.3)` da como resultado `0.1`; pero en una computadora este cálculo es aproximado y depende de las características del hardware (exponente, mantisa, base, véase ). En Python el resultado de la operación `(0.4 -0.3)` es diferente de `0.1`, veamos:\n\nPython ofrece herramientas que permiten realizar una mejor comparación entre números de tipo flotante. Por ejemplo la biblioteca `math` contiene la función `isclose(a, b)` en donde se puede definir una tolerancia mínima para que las dos expresiones, `a` y `b` se consideren iguales (*cercanas*), por ejemplo:\n\nSe recomienda revisar el manual de [`math.isclose()`](https://docs.python.org/3/library/math.html) y el de [`numpy.isclose()`](https://numpy.org/doc/stable/reference/generated/numpy.isclose.html)para comparación de arreglos con elementos de tipo flotante.\n\n## Fuertemente Tipado.\n\nPython es fuertemente tipado, lo que significa que el tipo de un objeto no puede cambiar repentinamente; se debe realizar una conversión explícita si se desea cambiar el tipo de un objeto.\n\nEsta característica también impide que se realizen operaciones entre tipos no compatibles. \n\nVeamos unos ejemplos:\n\n## Conversión entre tipos (*casting*) \n\nEs posible transformar un tipo en otro tipo compatible; a esta operación se lo conoce como *casting*.\n\n### Función `int()`\n\nTransforma objetos en enteros, siempre y cuando haya compatibilidad.\n\nFunción `str()`\n\nTransforma objetos en cadenas, siempre y cuando haya compatibilidad.\n\nFunción `float()`\n\nTransforma objetos en flotantes, siempre y cuando haya compatibilidad.\n\nEn general, si existe el tipo `<class 'MiClase'>`, donde `MiClase` puede ser un tipo de dato definido dentro de Python, alguna biblioteca o creada por el usuario, es posible realizar el *casting* del objeto `a` al tipo `<class 'MiClase'>` haciendo : `MiClase(a)` siempre y cuando haya compatibilidad.\n\n## Constantes\n\nPython contiene una serie de constantes integradas a las que no se les puede cambiar su valor. \n\nMás detalles se pueden encontrar en: [Built-in Constants](https://docs.python.org/3/library/constants.html)\n\nLas principales constantes son las siguientes:\n\n- `False`: de tipo Booleano.\n- `True`: de tipo Booleano.\n- `None`: El único valor para el tipo NoneType. Es usado frecuentemente para representar la ausencia de un valor, por ejemplo cuando no se pasa un argumento a una función.\n- `NotImplemented`: es un valor especial que es regresado por métodos binarios especiales (por ejemplo `__eq__()`, `__lt__()`, `__add__()`, `__rsub__()`, etc.) para indicar que la operación no está implementada con respecto a otro tipo. \n\n- `Ellipsis`: equivalente a `...`, es un valor especial usado mayormente en conjunción con la sintáxis de *slicing* de arreglos.\n\n- `__debug__` : Esta constante es verdadera si Python no se inició con la opción -O. \n\nLas siguiente constantes son usadas dentro del intérprete interactivo (no se pueden usar dentro de programas ejecutados fuera del intérprete).\n\n- `quit`(code=None)\n- `exit`(code=None)\n- `copyright`\n- `credits`\n- `license`\n\n\n","srcMarkdownNoYaml":"\n\n\n\n\n**Objetivo.**\nExplicar el concepto de variable, etiqueta, objetos y como se usan mediante algunos ejemplos.\n\n**Funciones de Python**:\n- `print()`, `type()`, `id()`, `chr()`, `ord()`, `del()`\n\n <p xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dct=\"http://purl.org/dc/terms/\"><a property=\"dct:title\" rel=\"cc:attributionURL\" href=\"https://github.com/repomacti/macti/tree/main/notebooks/Algebra_Lineal_01\">MACTI-Algebra_Lineal_01</a> by <a rel=\"cc:attributionURL dct:creator\" property=\"cc:attributionName\" href=\"https://www.macti.unam.mx\">Luis M. de la Cruz</a> is licensed under <a href=\"http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\" style=\"display:inline-block;\">Attribution-ShareAlike 4.0 International<img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"><img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"></a></p> \n\n\n\n## Tipos y operadores\n\nEn Python se tienen tres tipos de datos básicos principales:\n\n|Tipo|Ejemplo|\n|----|-------|\n|Númerico|13, 3.1416, 1+5j|\n| Cadena |\"Frida\", \"Diego\"|\n| Lógico | True, False|\n\n## Tipos númericos\nEn Python se tienen tres tipos de datos númericos:\n1. Enteros\n2. Reales\n3. Complejos\n\nA continuación se realiza una descripción de estos tipos numéricos. Más información se puede encontrar aquí: <a href=\"https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex\">Numeric types</a>.\n\n**1. Enteros**\n\nSon aquellos que carecen de parte decimal. Para definir un entero hacemos lo siguiente:\n\nCuando se ejecuta la celda anterior, se crea el objeto `13` cuyo nombre es `entero`. Podemos imprimir el valor de `entero` y su tipo como sigue:\n\nEs posible obtener más información del tipo `int` usando la biblioteca `sys`:\n\n**2. Reales**\n\nSon aquellos que tienen una parte decimal. Para definir un número real (flotante) se hace como sigue:\n\nCuando se ejecuta la celda anterior, se crea el objeto `3.141592` cuyo nombre es `pi`. Podemos imprimir el valor de `pi` y su tipo como sigue:\n\n**3. Complejos**\n\nSon aquellos que tienen una parte real y una parte imaginaria, y ambas partes son números reales. Para definir un número complejo se hace como sigue:\n\nCuando se ejecuta la celda anterior, se crea el objeto `12 + 5j` cuyo nombre es `complejo`. En este caso, el contenido de `complejo` tiene dos partes: la real y la imaginaria. Podemos imprimir el valor de `complejo` y su tipo como sigue:\n\n**Nota**: observa que hemos aplicado el método `conjugate()` al objeto `complejo`, esto es posible debido a que existe la clase `<class 'complex'>` en Python, y en ella se definen atributos y métodos para los objetos de esta clase. Más acerca de programación orientada a objetos la puedes ver en esta sección XXX.\n\n### Operadores aritméticos\n\nPara los tipos numéricos descritos antes, existen operaciones aritméticas que se pueden aplicar sobre ellos. Veamos:\n\n### Precedencia de operadores.\n\nLa aplicación de los operadores tiene cierta precedencia que está definida en cada implementación del lenguaje de programación. La siguiente tabla muestra el orden en que se aplicarán los operadores en una expresión. \n\n| Nivel | Categoría | Operadores|\n|---|---|---|\n| 7 | exponenciación | `**` |\n| 6 | multiplicación | `*`,`/`,`//`,`%` |\n| 5 | adición | `+`,`-`|\n| 4 | relacional | `==`,`!=`,`<=`,`>=`,`>`,`<`|\n| 3 | logicos | `not` |\n| 2 | logicos | `and` |\n| 1 | logicos | `or` |\n\nComo se puede ver, siempre se aplican primero los operadores aritméticos (niveles 7,6, y 5), luego los relacionales (nivel 4) y finalmente los lógicos (3, 2 y 1).\n\nMás acerca de este tema se puede ver aquí: <a href=\"https://docs.python.org/3/reference/expressions.html#operator-summary\">Operator precedence</a>.\n\nA continuación se muestran ejemplos de operaciones aritméticas en donde se resalta est precedencia:\n\n### Operaciones entre tipos diferentes\n\nEs posible combinar operaciones entre tipos de números diferentes. Lo que Python hará es promover cada número al tipo más sofisticado, siendo el orden de sofisticación, de menos a más, como sigue: `int`, `float`, `complex`.\n\n### Operadores de asignación\n\nExisten varios operadores para realizar asignaciones: `=`, `+=`, `-=`, `*=`, `/=`, `**=`, `%=`. La forma de uso de estos operadores se muestra en los siguientes ejemplos:\n\n## Tipos lógicos\n\nEs un tipo utilizado para realizar operaciones lógicas y puede tomar dos valores: `True` o `False`.\n\n### Operadores relacionales\n\nCuando se aplica un operador relacional a dos expresiones, se realiza una comparación entre dichas expresiones y se obtiene como resultado un tipo lógico. `True` o `False`.\n\nLos operadores relacionales que se pueden usar son: `==`,`!=`,`<=`,`>=`,`>`,`<`. A continuación se muestran algunos ejemplos:\n\n### Operaciones lógicas.\n\nLos operadores lógicos que se pueden usar son: `not`, `and` y `or`. Veamos algunos ejemplos\n\nDebido a la precedencia de operadores, no son necesarios los paréntesis en la operaciones relacionales de la expresión anterior (véase tabla ...):\n\nAunque a veces el uso de paréntesis hace la lectura del código más clara: \n\n#### Comparación entre números flotantes.\nLa comparación entre números de tipo flotante debe reaizarse con cuidado, veamos el siguiente ejemplo:\n\nEl cálculo a mano de `(0.4 -0.3)` da como resultado `0.1`; pero en una computadora este cálculo es aproximado y depende de las características del hardware (exponente, mantisa, base, véase ). En Python el resultado de la operación `(0.4 -0.3)` es diferente de `0.1`, veamos:\n\nPython ofrece herramientas que permiten realizar una mejor comparación entre números de tipo flotante. Por ejemplo la biblioteca `math` contiene la función `isclose(a, b)` en donde se puede definir una tolerancia mínima para que las dos expresiones, `a` y `b` se consideren iguales (*cercanas*), por ejemplo:\n\nSe recomienda revisar el manual de [`math.isclose()`](https://docs.python.org/3/library/math.html) y el de [`numpy.isclose()`](https://numpy.org/doc/stable/reference/generated/numpy.isclose.html)para comparación de arreglos con elementos de tipo flotante.\n\n## Fuertemente Tipado.\n\nPython es fuertemente tipado, lo que significa que el tipo de un objeto no puede cambiar repentinamente; se debe realizar una conversión explícita si se desea cambiar el tipo de un objeto.\n\nEsta característica también impide que se realizen operaciones entre tipos no compatibles. \n\nVeamos unos ejemplos:\n\n## Conversión entre tipos (*casting*) \n\nEs posible transformar un tipo en otro tipo compatible; a esta operación se lo conoce como *casting*.\n\n### Función `int()`\n\nTransforma objetos en enteros, siempre y cuando haya compatibilidad.\n\nFunción `str()`\n\nTransforma objetos en cadenas, siempre y cuando haya compatibilidad.\n\nFunción `float()`\n\nTransforma objetos en flotantes, siempre y cuando haya compatibilidad.\n\nEn general, si existe el tipo `<class 'MiClase'>`, donde `MiClase` puede ser un tipo de dato definido dentro de Python, alguna biblioteca o creada por el usuario, es posible realizar el *casting* del objeto `a` al tipo `<class 'MiClase'>` haciendo : `MiClase(a)` siempre y cuando haya compatibilidad.\n\n## Constantes\n\nPython contiene una serie de constantes integradas a las que no se les puede cambiar su valor. \n\nMás detalles se pueden encontrar en: [Built-in Constants](https://docs.python.org/3/library/constants.html)\n\nLas principales constantes son las siguientes:\n\n- `False`: de tipo Booleano.\n- `True`: de tipo Booleano.\n- `None`: El único valor para el tipo NoneType. Es usado frecuentemente para representar la ausencia de un valor, por ejemplo cuando no se pasa un argumento a una función.\n- `NotImplemented`: es un valor especial que es regresado por métodos binarios especiales (por ejemplo `__eq__()`, `__lt__()`, `__add__()`, `__rsub__()`, etc.) para indicar que la operación no está implementada con respecto a otro tipo. \n\n- `Ellipsis`: equivalente a `...`, es un valor especial usado mayormente en conjunción con la sintáxis de *slicing* de arreglos.\n\n- `__debug__` : Esta constante es verdadera si Python no se inició con la opción -O. \n\nLas siguiente constantes son usadas dentro del intérprete interactivo (no se pueden usar dentro de programas ejecutados fuera del intérprete).\n\n- `quit`(code=None)\n- `exit`(code=None)\n- `copyright`\n- `credits`\n- `license`\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"T03_TiposBasico_Operadores.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"Tipos de datos básicos y operadores."},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"T03_TiposBasico_Operadores.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"documentclass":"scrreprt","title":"Tipos de datos básicos y operadores."},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}